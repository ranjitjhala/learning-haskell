
==================== FINAL INTERFACE ====================
2016-10-15 19:17:13.712536 UTC

interface Hw1_BIfEhqsJAjG14532ILwRDE:XMLTypes 7102
  interface hash: fe832f67185618685817485591a047b1
  ABI hash: 037c72c6452cf48c1e89475eae72000a
  export-list hash: 2151761c31eaad91bd462c579fb853a4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ac2a39255c77ab14fb6eff81667d8a90
  sig of: Nothing
  used TH splices: False
  where
exports:
  XMLTypes.xml2string
  XMLTypes.ElementName
  XMLTypes.SimpleXML{XMLTypes.Element XMLTypes.PCDATA}
module dependencies:
package dependencies: base-4.8.1.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
259de95812be12badced93b8dbdc2a8b
  $fShowSimpleXML :: GHC.Show.Show XMLTypes.SimpleXML
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMLTypes.SimpleXML
                  XMLTypes.$fShowSimpleXML_$cshowsPrec
                  XMLTypes.$fShowSimpleXML_$cshow
                  XMLTypes.$fShowSimpleXML_$cshowList -}
259de95812be12badced93b8dbdc2a8b
  $fShowSimpleXML1 :: XMLTypes.SimpleXML -> GHC.Show.ShowS
  {- Arity: 2 -}
2f598a5c34d082e0956692683805a68b
  $fShowSimpleXML2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Element "#) -}
908857a092422ddd3c6438ad13098513
  $fShowSimpleXML3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PCDATA "#) -}
259de95812be12badced93b8dbdc2a8b
  $fShowSimpleXML_$cshow :: XMLTypes.SimpleXML -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XMLTypes.SimpleXML ->
                 XMLTypes.$fShowSimpleXML_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
259de95812be12badced93b8dbdc2a8b
  $fShowSimpleXML_$cshowList ::
    [XMLTypes.SimpleXML] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XMLTypes.SimpleXML
                   XMLTypes.$fShowSimpleXML1) -}
259de95812be12badced93b8dbdc2a8b
  $fShowSimpleXML_$cshowsPrec ::
    GHC.Types.Int -> XMLTypes.SimpleXML -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XMLTypes.SimpleXML
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XMLTypes.$w$cshowsPrec ww1 w1 w2 }) -}
259de95812be12badced93b8dbdc2a8b
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> XMLTypes.SimpleXML -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: XMLTypes.SimpleXML
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   XMLTypes.PCDATA b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             XMLTypes.$fShowSimpleXML3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XMLTypes.$fShowSimpleXML3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows6
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))))) }
                   XMLTypes.Element b1 b2
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            XMLTypes.$fShowSimpleXML2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows6
                               (GHC.Show.showLitString
                                  b1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows6
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (GHC.Show.showList__
                                           @ XMLTypes.SimpleXML
                                           XMLTypes.$fShowSimpleXML1
                                           b2
                                           x)))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) } }) -}
7ad111d114cc5d2fed4327de0c1e968c
  type ElementName = GHC.Base.String
259de95812be12badced93b8dbdc2a8b
  data SimpleXML
    = PCDATA GHC.Base.String
    | Element XMLTypes.ElementName [XMLTypes.SimpleXML]
74c9894bbaa9547faae2d53871652957
  xml2string :: XMLTypes.SimpleXML -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
instance GHC.Show.Show [XMLTypes.SimpleXML]
  = XMLTypes.$fShowSimpleXML
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

