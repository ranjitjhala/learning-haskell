
==================== FINAL INTERFACE ====================
2016-10-15 19:17:21.889849 UTC

interface Hw1_BIfEhqsJAjG14532ILwRDE:SOE 7102
  interface hash: 8f46678ad5e8ac8efc114ffbc63bce01
  ABI hash: 3c3369a7d0dc47508bbd6b3fa1a80d87
  export-list hash: 77bd7ec94baff5840a472109a735130d
  orphan hash: 434de84ba18f3b351391ace7aa670778
  flag hash: 2ebc079158987466af13c4368e2870a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  SOE.andRegion
  SOE.arc
  SOE.clearWindow
  SOE.closeWindow
  SOE.createEllipse
  SOE.createPolygon
  SOE.createRectangle
  SOE.diffRegion
  SOE.drawBufferedGraphic
  SOE.drawGraphic
  SOE.drawInWindow
  SOE.drawInWindowNow
  SOE.drawRegion
  SOE.ellipse
  SOE.emptyGraphic
  SOE.getKey
  SOE.getLBP
  SOE.getRBP
  SOE.getWindowEvent
  SOE.getWindowSize
  SOE.line
  SOE.maybeGetWindowEvent
  SOE.openWindow
  SOE.openWindowEx
  SOE.orRegion
  SOE.overGraphic
  SOE.overGraphics
  SOE.polyBezier
  SOE.polygon
  SOE.polyline
  SOE.runGraphics
  SOE.setGraphic
  SOE.shearEllipse
  SOE.text
  SOE.timeGetTime
  SOE.withColor
  SOE.word32ToInt
  SOE.xorRegion
  SOE.Angle
  SOE.Color{SOE.Black SOE.Blue SOE.Cyan SOE.Green SOE.Magenta SOE.Red SOE.White SOE.Yellow}
  SOE.Event{SOE.Button SOE.Closed SOE.Key SOE.MouseMove SOE.Refresh SOE.Resize SOE.char SOE.isDown SOE.isLeft SOE.pt}
  SOE.Graphic
  SOE.Point
  SOE.RedrawMode
  SOE.Region
  SOE.Size
  SOE.Title
  SOE.Window
  GHC.Word.Word32
module dependencies:
package dependencies: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML
                      GLURaw-1.5.0.3@GLURa_2ny2CNM2neI3xjbSQY15Ll
                      ObjectName-1.1.0.1@Objec_29HjkJsOm2S5lSH8rBwSAy
                      OpenGLRaw-2.6.1.1@OpenG_5cg6DP2r5P3Ko8xYSniSgL
                      OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE
                      StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      half-0.2.2.2@half_Jb2RpfGRtnLGOEym0KYOr6 integer-gmp-1.0.0.0
                      old-locale-1.0.0.7@oldlo_D6X1KPq5Sui5XjrHMwvFwK
                      old-time-1.1.0.3@oldti_FBWJJDS5FKr7UKFScBcUW2
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
family instance modules: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML:Graphics.UI.GLFW
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
import  -/  GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML:Graphics.UI.GLFW ccfde359c47090664546ab17b56ca193
import  -/  OpenGLRaw-2.6.1.1@OpenG_5cg6DP2r5P3Ko8xYSniSgL:Graphics.Rendering.OpenGL.Raw.Types 919f7c1689e5e498f5ebd40f8bd4abc6
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL 8419548a8c17f7a9f4a7b7dd58984a91
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.BeginEnd c358e31e383c4b5088989d66b363d722
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.BlendingFactor 29ce684f92717b51ce8247b2662cbd1d
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.Capability ddda35334e451c683b34bdd926c34e02
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.Colors 906d6e0456e157f18956def57c002d7e
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.ComparisonFunction ea663e5abded263cf8a89bfa174c731f
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.CoordTrans d5e8e2b9c73bbe5554d1b0e0bea28605
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.Framebuffer b80ce736371eaff3df0601483fc9e5af
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.LineSegments 25a5e4ffa2e75f851920c34f3522a40c
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.PerFragment ea04f85f5641ab58a10ee07cb4a25f3f
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.PrimitiveMode 39e86aa320f307e51e193d99da1f8855
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.Tensor 1341e6001f6fed91c3b6988e8021c2cf
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.VertexAttributes 48362d3128ebb0c9fca9efd2cfbf7b41
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GL.VertexSpec 64daaab8ca6704efe3b32ba55d026276
import  -/  OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE:Graphics.Rendering.OpenGL.GLU.Matrix 7bb93edbc10d296836230e9eaab0d8ae
import  -/  StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s:Data.StateVar 2d26d36923eb38cadc0de3a4b6fa0e45
import  -/  base-4.8.1.0:Control.Concurrent eedef4ce4eb0a2874a44a6b90863cce8
import  -/  base-4.8.1.0:Control.Concurrent.Chan 709fd195efd1271cf6fae2ddebec66db
import  -/  base-4.8.1.0:Control.Concurrent.MVar 42b17972c7194d81ab1db982ca1fc21e
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Ix ce034ce533050038d5f670743f5d9ce1
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:Data.Word 448c480b98a0c18988a37db5ab829b22
import  -/  base-4.8.1.0:GHC.Arr 2ea8d130456285023d914d097ca1dc4c
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Enum d0db4d619cd8916cc7a23444816222af
import  -/  base-4.8.1.0:GHC.Float a2f1c8675ca4f780f3a8aa0b05d1a5eb
import  -/  base-4.8.1.0:GHC.IO c40fa9051eafbe02c69624c2ae0f498f
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.MVar b4b3c5aff0a4a363f48f0cc3b89c1927
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Read cfaa50b414b9b02ef6fe4fe5600d9b95
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:GHC.Word ef6286c279d61931eb675109b4b93579
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO.Unsafe ef92cd1677ac901cad4b8432c8a18791
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  old-time-1.1.0.3@oldti_FBWJJDS5FKr7UKFScBcUW2:System.Time 2105f4b219d5098e34fd853373da2bc8
e255634fdac9ee548b1737e37f419e8e
  $cinRange :: (SOE.Color, SOE.Color) -> SOE.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (SOE.Color, SOE.Color) w1 :: SOE.Color ->
                 case w of ww { (,) ww1 ww2 -> SOE.$w$cinRange ww1 ww2 w1 }) -}
e255634fdac9ee548b1737e37f419e8e
  $cunsafeIndex ::
    (SOE.Color, SOE.Color) -> SOE.Color -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (SOE.Color, SOE.Color) w1 :: SOE.Color ->
                 case w of ww { (,) ww1 ww2 ->
                 case SOE.$w$cunsafeIndex ww1 w1 of ww3 { DEFAULT ->
                 GHC.Types.I# ww3 } }) -}
e255634fdac9ee548b1737e37f419e8e
  $fBoundedColor :: GHC.Enum.Bounded SOE.Color
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ SOE.Color SOE.Black SOE.White -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor :: GHC.Enum.Enum SOE.Color
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Color
                  SOE.$fEnumColor_$csucc
                  SOE.$fEnumColor_$cpred
                  SOE.$fEnumColor_$ctoEnum
                  SOE.$fEnumColor_$cfromEnum
                  SOE.$fEnumColor_$cenumFrom
                  SOE.$fEnumColor_$cenumFromThen
                  SOE.$fEnumColor_$cenumFromTo
                  SOE.$fEnumColor_$cenumFromThenTo -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor1 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go8 7) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor10 :: SOE.Color
  {- Strictness: b -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor11 :: SOE.Color
  {- Strictness: b -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor2 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go9 6) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor3 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go10 5) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor4 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go11 4) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor5 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go12 3) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor6 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go13 2) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor7 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go14 1) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor8 :: [SOE.Color]
  {- Unfolding: (SOE.$fEnumColor_go15 0) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor9 :: GHC.Prim.Int# -> SOE.Color
  {- Arity: 1, Strictness: <L,U>b -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$cenumFrom :: SOE.Color -> [SOE.Color]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a4 :: SOE.Color ->
                 case a4 of wild {
                   SOE.Black -> SOE.$fEnumColor8
                   SOE.Blue -> SOE.$fEnumColor7
                   SOE.Green -> SOE.$fEnumColor6
                   SOE.Cyan -> SOE.$fEnumColor5
                   SOE.Red -> SOE.$fEnumColor4
                   SOE.Magenta -> SOE.$fEnumColor3
                   SOE.Yellow -> SOE.$fEnumColor2
                   SOE.White -> SOE.$fEnumColor1 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$cenumFromThen :: SOE.Color -> SOE.Color -> [SOE.Color]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a4 :: SOE.Color b :: SOE.Color ->
                 let {
                   $j :: GHC.Prim.Int# -> [SOE.Color]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [SOE.Color]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [SOE.Color]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [SOE.Color]
                                    SOE.$fEnumColor_c
                                    (GHC.Types.[] @ SOE.Color)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [SOE.Color]
                                    SOE.$fEnumColor_c
                                    (GHC.Types.[] @ SOE.Color)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 7 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       SOE.Black -> $j1 0
                       SOE.Blue -> $j1 1
                       SOE.Green -> $j1 2
                       SOE.Cyan -> $j1 3
                       SOE.Red -> $j1 4
                       SOE.Magenta -> $j1 5
                       SOE.Yellow -> $j1 6
                       SOE.White -> $j1 7 }
                 } in
                 case a4 of wild {
                   SOE.Black -> $j 0
                   SOE.Blue -> $j 1
                   SOE.Green -> $j 2
                   SOE.Cyan -> $j 3
                   SOE.Red -> $j 4
                   SOE.Magenta -> $j 5
                   SOE.Yellow -> $j 6
                   SOE.White -> $j 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$cenumFromThenTo ::
    SOE.Color -> SOE.Color -> SOE.Color -> [SOE.Color]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$cenumFromTo :: SOE.Color -> SOE.Color -> [SOE.Color]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: SOE.Color y :: SOE.Color ->
                 let {
                   $j :: GHC.Prim.Int# -> [SOE.Color]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       SOE.Black
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go7 x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Blue
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go6 x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Green
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go5 x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Cyan
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go4 x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Red
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 4) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Magenta
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 5) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Yellow
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 6) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.White
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 7) of wild1 {
                            GHC.Types.False -> SOE.$fEnumColor_go x1
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color } }
                 } in
                 case x of wild {
                   SOE.Black -> $j 0
                   SOE.Blue -> $j 1
                   SOE.Green -> $j 2
                   SOE.Cyan -> $j 3
                   SOE.Red -> $j 4
                   SOE.Magenta -> $j 5
                   SOE.Yellow -> $j 6
                   SOE.White -> $j 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$cfromEnum :: SOE.Color -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: SOE.Color ->
                 case w of wild {
                   SOE.Black -> GHC.Types.I# 0
                   SOE.Blue -> GHC.Types.I# 1
                   SOE.Green -> GHC.Types.I# 2
                   SOE.Cyan -> GHC.Types.I# 3
                   SOE.Red -> GHC.Types.I# 4
                   SOE.Magenta -> GHC.Types.I# 5
                   SOE.Yellow -> GHC.Types.I# 6
                   SOE.White -> GHC.Types.I# 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$cpred :: SOE.Color -> SOE.Color
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a4 :: SOE.Color ->
                 case a4 of wild {
                   SOE.Black -> SOE.$fEnumColor10
                   SOE.Blue -> SOE.Black
                   SOE.Green -> SOE.Blue
                   SOE.Cyan -> SOE.Green
                   SOE.Red -> SOE.Cyan
                   SOE.Magenta -> SOE.Red
                   SOE.Yellow -> SOE.Magenta
                   SOE.White -> SOE.Yellow }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$csucc :: SOE.Color -> SOE.Color
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a4 :: SOE.Color ->
                 case a4 of wild {
                   SOE.Black -> SOE.Blue
                   SOE.Blue -> SOE.Green
                   SOE.Green -> SOE.Cyan
                   SOE.Cyan -> SOE.Red
                   SOE.Red -> SOE.Magenta
                   SOE.Magenta -> SOE.Yellow
                   SOE.Yellow -> SOE.White
                   SOE.White -> SOE.$fEnumColor11 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_$ctoEnum :: GHC.Types.Int -> SOE.Color
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> SOE.$w$ctoEnum ww1 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_c :: GHC.Types.Int -> [SOE.Color] -> [SOE.Color]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [SOE.Color] ->
                 GHC.Types.:
                   @ SOE.Color
                   (case x of wild { GHC.Types.I# a4 ->
                    GHC.Prim.tagToEnum# @ SOE.Color a4 })
                   ys) -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go1 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go10 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go11 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go12 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go13 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go14 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go15 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go2 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go3 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go4 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go5 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go6 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go7 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go8 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEnumColor_go9 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fEqColor :: GHC.Classes.Eq SOE.Color
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Color SOE.$fEqColor_$c== SOE.$fEqColor_$c/= -}
e255634fdac9ee548b1737e37f419e8e
  $fEqColor_$c/= :: SOE.Color -> SOE.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a4 :: SOE.Color b :: SOE.Color ->
                 case a4 of wild {
                   SOE.Black
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.Black -> GHC.Types.False }
                   SOE.Blue
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.Blue -> GHC.Types.False }
                   SOE.Green
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.Green -> GHC.Types.False }
                   SOE.Cyan
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.Cyan -> GHC.Types.False }
                   SOE.Red
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.Red -> GHC.Types.False }
                   SOE.Magenta
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.Magenta -> GHC.Types.False }
                   SOE.Yellow
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.Yellow -> GHC.Types.False }
                   SOE.White
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SOE.White -> GHC.Types.False } }) -}
e255634fdac9ee548b1737e37f419e8e
  $fEqColor_$c== :: SOE.Color -> SOE.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: SOE.Color ds1 :: SOE.Color ->
                 case ds of wild {
                   SOE.Black
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.Black -> GHC.Types.True }
                   SOE.Blue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.Blue -> GHC.Types.True }
                   SOE.Green
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.Green -> GHC.Types.True }
                   SOE.Cyan
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.Cyan -> GHC.Types.True }
                   SOE.Red
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.Red -> GHC.Types.True }
                   SOE.Magenta
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.Magenta -> GHC.Types.True }
                   SOE.Yellow
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.Yellow -> GHC.Types.True }
                   SOE.White
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SOE.White -> GHC.Types.True } }) -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor :: GHC.Arr.Ix SOE.Color
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Color
                  SOE.$fOrdColor
                  SOE.$fIxColor_$crange
                  SOE.$fIxColor_$cindex
                  SOE.$cunsafeIndex
                  SOE.$cinRange
                  SOE.$fIxColor_$crangeSize
                  SOE.$fIxColor_$cunsafeRangeSize -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_$cindex ::
    (SOE.Color, SOE.Color) -> SOE.Color -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ b :: (SOE.Color, SOE.Color) i :: SOE.Color ->
                 case SOE.$cinRange b i of wild {
                   GHC.Types.False -> GHC.Arr.hopelessIndexError
                   GHC.Types.True -> SOE.$cunsafeIndex b i }) -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_$crange :: (SOE.Color, SOE.Color) -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (SOE.Color, SOE.Color) ->
                 case w of ww { (,) ww1 ww2 -> SOE.$w$crange ww1 ww2 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_$crangeSize :: (SOE.Color, SOE.Color) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (SOE.Color, SOE.Color) ->
                 case w of ww { (,) ww1 ww2 ->
                 case SOE.$w$crangeSize ww1 ww2 of ww3 { DEFAULT ->
                 GHC.Types.I# ww3 } }) -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_$cunsafeRangeSize ::
    (SOE.Color, SOE.Color) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ b :: (SOE.Color, SOE.Color) ->
                 case b of wild { (,) _l h ->
                 case SOE.$cunsafeIndex wild h of wild1 { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.+# x 1) } }) -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go1 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go2 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go3 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go4 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go5 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go6 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fIxColor_go7 :: GHC.Prim.Int# -> [SOE.Color]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor :: GHC.Classes.Ord SOE.Color
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Color
                  SOE.$fEqColor
                  SOE.$fOrdColor_$ccompare
                  SOE.$fOrdColor_$c<
                  SOE.$fOrdColor_$c<=
                  SOE.$fOrdColor_$c>
                  SOE.$fOrdColor_$c>=
                  SOE.$fOrdColor_$cmax
                  SOE.$fOrdColor_$cmin -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor_$c< :: SOE.Color -> SOE.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a4 :: SOE.Color b :: SOE.Color ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     case b of wild {
                       SOE.Black
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 0)
                       SOE.Blue -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 1)
                       SOE.Green
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 2)
                       SOE.Cyan -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 3)
                       SOE.Red -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 4)
                       SOE.Magenta
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 5)
                       SOE.Yellow
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 6)
                       SOE.White
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 7) }
                 } in
                 case a4 of wild {
                   SOE.Black -> $j 0
                   SOE.Blue -> $j 1
                   SOE.Green -> $j 2
                   SOE.Cyan -> $j 3
                   SOE.Red -> $j 4
                   SOE.Magenta -> $j 5
                   SOE.Yellow -> $j 6
                   SOE.White -> $j 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor_$c<= :: SOE.Color -> SOE.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a4 :: SOE.Color b :: SOE.Color ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     case b of wild {
                       SOE.Black
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 0)
                       SOE.Blue
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 1)
                       SOE.Green
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 2)
                       SOE.Cyan
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 3)
                       SOE.Red -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 4)
                       SOE.Magenta
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 5)
                       SOE.Yellow
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 6)
                       SOE.White
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 7) }
                 } in
                 case a4 of wild {
                   SOE.Black -> $j 0
                   SOE.Blue -> $j 1
                   SOE.Green -> $j 2
                   SOE.Cyan -> $j 3
                   SOE.Red -> $j 4
                   SOE.Magenta -> $j 5
                   SOE.Yellow -> $j 6
                   SOE.White -> $j 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor_$c> :: SOE.Color -> SOE.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a4 :: SOE.Color b :: SOE.Color ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     case b of wild {
                       SOE.Black
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 0)
                       SOE.Blue -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 1)
                       SOE.Green
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 2)
                       SOE.Cyan -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 3)
                       SOE.Red -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 4)
                       SOE.Magenta
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 5)
                       SOE.Yellow
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 6)
                       SOE.White
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 7) }
                 } in
                 case a4 of wild {
                   SOE.Black -> $j 0
                   SOE.Blue -> $j 1
                   SOE.Green -> $j 2
                   SOE.Cyan -> $j 3
                   SOE.Red -> $j 4
                   SOE.Magenta -> $j 5
                   SOE.Yellow -> $j 6
                   SOE.White -> $j 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor_$c>= :: SOE.Color -> SOE.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a4 :: SOE.Color b :: SOE.Color ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     case b of wild {
                       SOE.Black
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 0)
                       SOE.Blue
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 1)
                       SOE.Green
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 2)
                       SOE.Cyan
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 3)
                       SOE.Red -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 4)
                       SOE.Magenta
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 5)
                       SOE.Yellow
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 6)
                       SOE.White
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 7) }
                 } in
                 case a4 of wild {
                   SOE.Black -> $j 0
                   SOE.Blue -> $j 1
                   SOE.Green -> $j 2
                   SOE.Cyan -> $j 3
                   SOE.Red -> $j 4
                   SOE.Magenta -> $j 5
                   SOE.Yellow -> $j 6
                   SOE.White -> $j 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor_$ccompare ::
    SOE.Color -> SOE.Color -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a4 :: SOE.Color b :: SOE.Color ->
                 case a4 of wild {
                   SOE.Black
                   -> case b of wild1 {
                        SOE.Black -> GHC.Types.EQ
                        SOE.Blue -> GHC.Types.LT
                        SOE.Green -> GHC.Types.LT
                        SOE.Cyan -> GHC.Types.LT
                        SOE.Red -> GHC.Types.LT
                        SOE.Magenta -> GHC.Types.LT
                        SOE.Yellow -> GHC.Types.LT
                        SOE.White -> GHC.Types.LT }
                   SOE.Blue
                   -> case b of wild1 {
                        SOE.Black -> GHC.Types.GT
                        SOE.Blue -> GHC.Types.EQ
                        SOE.Green -> GHC.Types.LT
                        SOE.Cyan -> GHC.Types.LT
                        SOE.Red -> GHC.Types.LT
                        SOE.Magenta -> GHC.Types.LT
                        SOE.Yellow -> GHC.Types.LT
                        SOE.White -> GHC.Types.LT }
                   SOE.Green
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SOE.Green -> GHC.Types.EQ
                        SOE.Cyan -> GHC.Types.LT
                        SOE.Red -> GHC.Types.LT
                        SOE.Magenta -> GHC.Types.LT
                        SOE.Yellow -> GHC.Types.LT
                        SOE.White -> GHC.Types.LT }
                   SOE.Cyan
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SOE.Cyan -> GHC.Types.EQ
                        SOE.Red -> GHC.Types.LT
                        SOE.Magenta -> GHC.Types.LT
                        SOE.Yellow -> GHC.Types.LT
                        SOE.White -> GHC.Types.LT }
                   SOE.Red
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SOE.Red -> GHC.Types.EQ
                        SOE.Magenta -> GHC.Types.LT
                        SOE.Yellow -> GHC.Types.LT
                        SOE.White -> GHC.Types.LT }
                   SOE.Magenta
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SOE.Magenta -> GHC.Types.EQ
                        SOE.Yellow -> GHC.Types.LT
                        SOE.White -> GHC.Types.LT }
                   SOE.Yellow
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        SOE.Yellow -> GHC.Types.EQ
                        SOE.White -> GHC.Types.LT }
                   SOE.White
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT SOE.White -> GHC.Types.EQ } }) -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor_$cmax :: SOE.Color -> SOE.Color -> SOE.Color
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: SOE.Color y :: SOE.Color ->
                 case SOE.$fOrdColor_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
e255634fdac9ee548b1737e37f419e8e
  $fOrdColor_$cmin :: SOE.Color -> SOE.Color -> SOE.Color
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: SOE.Color y :: SOE.Color ->
                 case SOE.$fOrdColor_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor :: GHC.Read.Read SOE.Color
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Color
                  SOE.$fReadColor_$s$dmreadsPrec
                  SOE.$fReadColor_$sreadListDefault
                  SOE.$fReadColor_$creadPrec
                  SOE.$fReadColor_$creadListPrec -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([SOE.Color] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [SOE.Color] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ SOE.Color
                   SOE.$fReadColor2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <SOE.Color>_R))
                   @ b
                   eta1) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor15
                   SOE.$fReadColor11) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor12
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor14,
                  SOE.$fReadColor13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.White) -}
5fce73594a93c45fecd42e2f46a74e39
  $fReadColor14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "White"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor17,
                  SOE.$fReadColor16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.Yellow) -}
a181cbdd26e1dd3536dee0f8457764e9
  $fReadColor17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Yellow"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor20,
                  SOE.$fReadColor19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.Magenta) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP SOE.Color
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ SOE.Color
                   SOE.$fReadColor3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <SOE.Color>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <SOE.Color>_R)))) -}
8ab182740ffefc7a77ed043e22fd3d6d
  $fReadColor20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Magenta"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor23,
                  SOE.$fReadColor22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.Red) -}
9675c6fbbd71e5c76932dce680cca2eb
  $fReadColor23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Red"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor26,
                  SOE.$fReadColor25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.Cyan) -}
0885875618acb27e1f653e99f52f5d5d
  $fReadColor26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cyan"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor29,
                  SOE.$fReadColor28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.Green) -}
a4c08c994649e0ccc338bf4d1b0f8a56
  $fReadColor29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Green"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2 @ SOE.Color SOE.$fReadColor4 eta @ b eta1) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor32,
                  SOE.$fReadColor31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.Blue) -}
a64cb122ee1430cb0ee347fd866bf4e4
  $fReadColor32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Blue"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
  {- Strictness: m,
     Unfolding: ((SOE.$fReadColor35,
                  SOE.$fReadColor34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <SOE.Color>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <SOE.Color>_R))))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (SOE.Color -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: SOE.Color -> Text.ParserCombinators.ReadP.P b ->
                 eta SOE.Black) -}
ccee5bafabfb1af2c2721f0c69068109
  $fReadColor35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Black"#) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor33
                   SOE.$fReadColor5) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor30
                   SOE.$fReadColor6) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor27
                   SOE.$fReadColor7) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor24
                   SOE.$fReadColor8) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor21
                   SOE.$fReadColor9) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color)
                   SOE.$fReadColor18
                   SOE.$fReadColor10) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [SOE.Color]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                SOE.$fReadColor1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[SOE.Color]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[SOE.Color]>_R))) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec SOE.Color
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                SOE.$fReadColor2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <SOE.Color>_R)) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS SOE.Color
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ SOE.Color
                   SOE.$fReadColor_$creadPrec
                   eta) -}
e255634fdac9ee548b1737e37f419e8e
  $fReadColor_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [SOE.Color]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [SOE.Color]
                   ((SOE.$fReadColor_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <[SOE.Color]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[SOE.Color]>_R)
                      @ [SOE.Color]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [SOE.Color]))) -}
f6140737bb3eedf1852142a572a459ff
  $fShowAtom :: GHC.Show.Show SOE.Atom
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Atom
                  SOE.$fShowAtom_$cshowsPrec
                  SOE.$fShowAtom_$cshow
                  SOE.$fShowAtom_$cshowList -}
f6140737bb3eedf1852142a572a459ff
  $fShowAtom_$cshow :: SOE.Atom -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ ds :: SOE.Atom ->
                 case ds of wild {
                   SOE.Pos ds1
                   -> case ds1 of wild1 { (,) s ds2 ->
                      GHC.CString.unpackAppendCString# "+"# s }
                   SOE.Neg ds1
                   -> case ds1 of wild1 { (,) s ds2 ->
                      GHC.CString.unpackAppendCString# "-"# s } }) -}
f6140737bb3eedf1852142a572a459ff
  $fShowAtom_$cshowList :: [SOE.Atom] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [SOE.Atom] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ SOE.Atom
                   (SOE.$fShowAtom_$cshowsPrec GHC.Show.shows18)
                   ls
                   s) -}
f6140737bb3eedf1852142a572a459ff
  $fShowAtom_$cshowsPrec ::
    GHC.Types.Int -> SOE.Atom -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: SOE.Atom w2 :: GHC.Base.String ->
                 SOE.$w$cshowsPrec w1 w2) -}
e255634fdac9ee548b1737e37f419e8e
  $fShowColor :: GHC.Show.Show SOE.Color
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Color
                  SOE.$fShowColor_$cshowsPrec
                  SOE.$fShowColor_$cshow
                  SOE.$fShowColor_$cshowList -}
e255634fdac9ee548b1737e37f419e8e
  $fShowColor_$cshow :: SOE.Color -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: SOE.Color ->
                 SOE.$fShowColor_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e255634fdac9ee548b1737e37f419e8e
  $fShowColor_$cshowList :: [SOE.Color] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ SOE.Color SOE.$w$cshowsPrec1) -}
e255634fdac9ee548b1737e37f419e8e
  $fShowColor_$cshowsPrec ::
    GHC.Types.Int -> SOE.Color -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: SOE.Color w2 :: GHC.Base.String ->
                 SOE.$w$cshowsPrec1 w1 w2) -}
28dd942edef49358a746a306c6aa4e64
  $fShowEvent :: GHC.Show.Show SOE.Event
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SOE.Event
                  SOE.$fShowEvent_$cshowsPrec
                  SOE.$fShowEvent_$cshow
                  SOE.$fShowEvent_$cshowList -}
28dd942edef49358a746a306c6aa4e64
  $fShowEvent1 :: SOE.Event -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (SOE.$fShowEvent_$cshowsPrec SOE.$fShowEvent2) -}
10b155ca87592a61914f54096bcdec15
  $fShowEvent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
28dd942edef49358a746a306c6aa4e64
  $fShowEvent_$cshow :: SOE.Event -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: SOE.Event ->
                 SOE.$fShowEvent_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
28dd942edef49358a746a306c6aa4e64
  $fShowEvent_$cshowList :: [SOE.Event] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ SOE.Event SOE.$fShowEvent1) -}
28dd942edef49358a746a306c6aa4e64
  $fShowEvent_$cshowsPrec ::
    GHC.Types.Int -> SOE.Event -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
e255634fdac9ee548b1737e37f419e8e
  $w$cinRange ::
    SOE.Color -> SOE.Color -> SOE.Color -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><S,1*U>,
     Inline: [0] -}
e255634fdac9ee548b1737e37f419e8e
  $w$crange :: SOE.Color -> SOE.Color -> [SOE.Color]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: SOE.Color ww1 :: SOE.Color ->
                 let {
                   $j :: GHC.Prim.Int# -> [SOE.Color]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     case ww1 of wild {
                       SOE.Black
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 0) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go7 a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Blue
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 1) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go6 a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Green
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 2) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go5 a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Cyan
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 3) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go4 a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Red
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 4) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go3 a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Magenta
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 5) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go2 a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.Yellow
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 6) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go1 a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color }
                       SOE.White
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># a# 7) of wild1 {
                            GHC.Types.False -> SOE.$fIxColor_go a#
                            GHC.Types.True -> GHC.Types.[] @ SOE.Color } }
                 } in
                 case ww of wild {
                   SOE.Black -> $j 0
                   SOE.Blue -> $j 1
                   SOE.Green -> $j 2
                   SOE.Cyan -> $j 3
                   SOE.Red -> $j 4
                   SOE.Magenta -> $j 5
                   SOE.Yellow -> $j 6
                   SOE.White -> $j 7 }) -}
e255634fdac9ee548b1737e37f419e8e
  $w$crangeSize :: SOE.Color -> SOE.Color -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ ww :: SOE.Color ww1 :: SOE.Color ->
                 case SOE.$w$cinRange ww ww1 ww1 of wild1 {
                   GHC.Types.False -> 0
                   GHC.Types.True
                   -> case SOE.$w$cunsafeIndex ww ww1 of ww2 { DEFAULT ->
                      GHC.Prim.+# ww2 1 } }) -}
f6140737bb3eedf1852142a572a459ff
  $w$cshowsPrec :: SOE.Atom -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: SOE.Atom w1 :: GHC.Base.String ->
                 case w of wild {
                   SOE.Pos ds
                   -> case ds of wild1 { (,) s ds1 ->
                      GHC.CString.unpackAppendCString#
                        "+"#
                        (GHC.Base.++ @ GHC.Types.Char s w1) }
                   SOE.Neg ds
                   -> case ds of wild1 { (,) s ds1 ->
                      GHC.CString.unpackAppendCString#
                        "-"#
                        (GHC.Base.++ @ GHC.Types.Char s w1) } }) -}
e255634fdac9ee548b1737e37f419e8e
  $w$cshowsPrec1 :: SOE.Color -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: SOE.Color w1 :: GHC.Base.String ->
                 case w of wild {
                   SOE.Black -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor35 w1
                   SOE.Blue -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor32 w1
                   SOE.Green -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor29 w1
                   SOE.Cyan -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor26 w1
                   SOE.Red -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor23 w1
                   SOE.Magenta -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor20 w1
                   SOE.Yellow -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor17 w1
                   SOE.White
                   -> GHC.Base.++ @ GHC.Types.Char SOE.$fReadColor14 w1 }) -}
e255634fdac9ee548b1737e37f419e8e
  $w$ctoEnum :: GHC.Prim.Int# -> SOE.Color
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> SOE.$fEnumColor9 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 7) of wild1 {
                        GHC.Types.False -> SOE.$fEnumColor9 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ SOE.Color ww } }) -}
e255634fdac9ee548b1737e37f419e8e
  $w$cunsafeIndex :: SOE.Color -> SOE.Color -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: SOE.Color w :: SOE.Color ->
                 let {
                   $w$j :: GHC.Prim.Int# -> GHC.Prim.Int#
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ w1 :: GHC.Prim.Int#[OneShot] ->
                     case w of wild {
                       SOE.Black -> GHC.Prim.-# 0 w1
                       SOE.Blue -> GHC.Prim.-# 1 w1
                       SOE.Green -> GHC.Prim.-# 2 w1
                       SOE.Cyan -> GHC.Prim.-# 3 w1
                       SOE.Red -> GHC.Prim.-# 4 w1
                       SOE.Magenta -> GHC.Prim.-# 5 w1
                       SOE.Yellow -> GHC.Prim.-# 6 w1
                       SOE.White -> GHC.Prim.-# 7 w1 }
                 } in
                 case ww of wild {
                   SOE.Black -> $w$j 0
                   SOE.Blue -> $w$j 1
                   SOE.Green -> $w$j 2
                   SOE.Cyan -> $w$j 3
                   SOE.Red -> $w$j 4
                   SOE.Magenta -> $w$j 5
                   SOE.Yellow -> $w$j 6
                   SOE.White -> $w$j 7 }) -}
75a913474531239247db438307dd4330
  $w$ssegment ::
    GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> Graphics.Rendering.OpenGL.Raw.Types.GLfloat
    -> [Graphics.Rendering.OpenGL.Raw.Types.GLfloat]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Float#
                   ww1 :: GHC.Prim.Float#
                   w :: Graphics.Rendering.OpenGL.Raw.Types.GLfloat ->
                 let {
                   a4 :: GHC.Types.Float = GHC.Types.F# ww1
                 } in
                 let {
                   lvl42 :: [Graphics.Rendering.OpenGL.Raw.Types.GLfloat]
                   = GHC.Types.:
                       @ Graphics.Rendering.OpenGL.Raw.Types.GLfloat
                       a4 `cast` (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                       (GHC.Types.[] @ Graphics.Rendering.OpenGL.Raw.Types.GLfloat)
                 } in
                 letrec {
                   $wts :: GHC.Prim.Float#
                           -> [Graphics.Rendering.OpenGL.Raw.Types.GLfloat]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww2 :: GHC.Prim.Float# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.geFloat# ww2 ww1) of wild {
                       GHC.Types.False
                       -> GHC.Types.:
                            @ Graphics.Rendering.OpenGL.Raw.Types.GLfloat
                            (GHC.Types.F# ww2) `cast` (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                            (case w `cast`
                                  (Foreign.C.Types.NTCo:CFloat[0]) of wild1 { GHC.Types.F# y ->
                             $wts (GHC.Prim.plusFloat# ww2 y) })
                       GHC.Types.True -> lvl42 }
                 } in
                 $wts ww) -}
3fb14f58cafde9320b14946606a650bc
  $wa ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> SOE.Angle
    -> SOE.Angle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Types.Int
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int
                   w :: SOE.Angle
                   w1 :: SOE.Angle
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.$wnormaliseBounds
                        ww
                        ww1
                        ww2
                        ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 case ww5
                        `cast`
                      (Foreign.C.Types.NTCo:CFloat[0]) of wild { GHC.Types.F# x ->
                 case ww7
                        `cast`
                      (Foreign.C.Types.NTCo:CFloat[0]) of wild1 { GHC.Types.F# x1 ->
                 case ww6
                        `cast`
                      (Foreign.C.Types.NTCo:CFloat[0]) of wild2 { GHC.Types.F# x2 ->
                 case ww8
                        `cast`
                      (Foreign.C.Types.NTCo:CFloat[0]) of wild3 { GHC.Types.F# x3 ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glTranslatef
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                 let {
                   y :: GHC.Prim.Float# = GHC.Prim.divideFloat# x1 __float 2.0
                 } in
                 let {
                   y1 :: GHC.Prim.Float# = GHC.Prim.divideFloat# x3 __float 2.0
                 } in
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds5
                        (GHC.Prim.plusFloat# x y)
                        (GHC.Prim.plusFloat# x2 y1)
                        __float 0.0
                        w2 of wild4 { (##) ds12 ->
                 Control.Exception.Base.bracket_1
                   @ ()
                   @ ()
                   @ ()
                   SOE.arc2 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   Graphics.Rendering.OpenGL.GL.BeginEnd.$sglEnd
                   (\ w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case w `cast`
                         (Foreign.C.Types.NTCo:CFloat[0]) of wild5 { GHC.Types.F# x4 ->
                    case w1
                           `cast`
                         (Foreign.C.Types.NTCo:CFloat[0]) of wild6 { GHC.Types.F# y2 ->
                    SOE.$wa1
                      (GHC.Types.F# y) `cast` (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                      (GHC.Types.F# y1) `cast` (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                      (GHC.Prim.negateFloat#
                         (GHC.Prim.divideFloat#
                            (GHC.Prim.timesFloat#
                               (GHC.Prim.plusFloat# x4 y2)
                               __float 3.1415927)
                            __float 180.0))
                      (GHC.Prim.negateFloat#
                         (GHC.Prim.divideFloat#
                            (GHC.Prim.timesFloat# x4 __float 3.1415927)
                            __float 180.0))
                      (case GHC.Prim.divideFloat#
                              __float 20.0
                              (GHC.Prim.plusFloat# y y1) of wild7 { DEFAULT ->
                       (GHC.Types.F# wild7)
                         `cast`
                       (Sym (Foreign.C.Types.NTCo:CFloat[0])) })
                      w3 } })
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   ds12 } } } } } } }) -}
2c1608b36a135d7cb5ba95cd63fb8ae6
  $wa1 ::
    Graphics.Rendering.OpenGL.Raw.Types.GLfloat
    -> Graphics.Rendering.OpenGL.Raw.Types.GLfloat
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> Graphics.Rendering.OpenGL.Raw.Types.GLfloat
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><L,U(U)><L,U><L,U><L,U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Graphics.Rendering.OpenGL.Raw.Types.GLfloat
                   w1 :: Graphics.Rendering.OpenGL.Raw.Types.GLfloat
                   ww :: GHC.Prim.Float#
                   ww1 :: GHC.Prim.Float#
                   w2 :: Graphics.Rendering.OpenGL.Raw.Types.GLfloat
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 letrec {
                   a4 :: [Graphics.Rendering.OpenGL.Raw.Types.GLfloat]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds :: [Graphics.Rendering.OpenGL.Raw.Types.GLfloat]
                       eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case w `cast`
                               (Foreign.C.Types.NTCo:CFloat[0]) of wild1 { GHC.Types.F# x ->
                          case y `cast`
                               (Foreign.C.Types.NTCo:CFloat[0]) of wild2 { GHC.Types.F# x1 ->
                          case w1
                                 `cast`
                               (Foreign.C.Types.NTCo:CFloat[0]) of wild3 { GHC.Types.F# x2 ->
                          case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glVertex3f
                                 `cast`
                               (GHC.Ptr.FunPtr
                                  (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                                   ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                                   ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                                   ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                          case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                                  -> GHC.Prim.Float#
                                                  -> GHC.Prim.Float#
                                                  -> GHC.Prim.Float#
                                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                                 ds5
                                 (GHC.Prim.timesFloat# x (GHC.Prim.cosFloat# x1))
                                 (GHC.Prim.timesFloat# x2 (GHC.Prim.sinFloat# x1))
                                 __float 0.0
                                 eta of wild4 { (##) ds12 ->
                          a4 ys ds12 } } } } } }
                 } in
                 a4 (SOE.$w$ssegment ww ww1 w2) w3) -}
6b0881c069c2df6d533528dbacb12e83
  $wa2 ::
    GHC.Prim.MVar#
      GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream SOE.Event)
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream SOE.Event)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.MVar#
                           GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream SOE.Event)
                   ww1 :: GHC.Prim.MVar#
                            GHC.Prim.RealWorld (Control.Concurrent.Chan.Stream SOE.Event)
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Control.Concurrent.Chan.$wa3
                        @ SOE.Event
                        ww
                        ww1
                        SOE.Closed
                        w of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.getMaskingState# ipv of ds { (#,#) ipv2 ipv3 ->
                 case ipv3 of ds2 {
                   DEFAULT
                   -> case SOE.opened of wild { GHC.MVar.MVar mvar# ->
                      case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Bool
                             mvar#
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Bool
                             @ GHC.Exception.SomeException
                             SOE.closeWindow4
                             (\ e1 :: GHC.Exception.SomeException[OneShot]
                                eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ GHC.Types.Bool
                                     mvar#
                                     ipv5
                                     eta1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ GHC.Types.Bool
                                e1
                                s2# })
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Bool
                             mvar#
                             ipv7
                             ipv6 of s2# { DEFAULT ->
                      case {__pkg_ccall GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwCloseWindow GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld #)}
                             s2# of wild1 { (##) ds5 ->
                      case {__pkg_ccall_GC GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwPollEvents GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                   -> (# GHC.Prim.State#
                                                                                                           GHC.Prim.RealWorld #)}
                             ds5 of wild2 { (##) ds6 ->
                      (# ds6, GHC.Tuple.() #) } } } } } }
                   0
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ ()
                             SOE.closeWindow2
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case {__pkg_ccall GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwCloseWindow GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld #)}
                             ipv4 of wild { (##) ds4 ->
                      case {__pkg_ccall_GC GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwPollEvents GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                   -> (# GHC.Prim.State#
                                                                                                           GHC.Prim.RealWorld #)}
                             ds4 of wild1 { (##) ds5 ->
                      (# ds5, GHC.Tuple.() #) } } } } } }) -}
a3d720dbb67c7fa63b00b5fd9c9c5c32
  $wa3 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glVertex3f
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds5
                        (GHC.Prim.double2Float# (GHC.Prim.int2Double# ww))
                        (GHC.Prim.double2Float# (GHC.Prim.int2Double# ww1))
                        __float 0.0
                        w of wild { (##) ds12 ->
                 (# ds12, GHC.Tuple.() #) } }) -}
55e4058574ae4580be3cf9fc59b7250b
  $wa4 ::
    SOE.Window
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Point #)
  {- Arity: 3, Strictness: <L,U(U(U),U(U,U))><L,U><L,U>, Inline: [0],
     Unfolding: (\ w :: SOE.Window
                   w1 :: GHC.Types.Bool
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.getKey4 w w2 of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   a4 :: SOE.Event
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Point #)
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ e :: SOE.Event
                       eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case e of wild {
                       DEFAULT
                       -> case SOE.getKey4 w eta of ds2 { (#,#) ipv2 ipv3 ->
                          a4 ipv3 ipv2 }
                       SOE.Button ds ds2 ds3
                       -> case ds3 of wild1 {
                            GHC.Types.False
                            -> case w1 of wild2 {
                                 GHC.Types.False -> (# eta, ds #)
                                 GHC.Types.True
                                 -> case SOE.getKey4 w eta of ds4 { (#,#) ipv2 ipv3 ->
                                    a4 ipv3 ipv2 } }
                            GHC.Types.True
                            -> case w1 of wild2 {
                                 GHC.Types.False
                                 -> case SOE.getKey4 w eta of ds4 { (#,#) ipv2 ipv3 ->
                                    a4 ipv3 ipv2 }
                                 GHC.Types.True -> (# eta, ds #) } } }
                 } in
                 a4 ipv1 ipv }) -}
6e0453aa44821fb1b74918ce993589d6
  $wa5 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Types.Int
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Control.Exception.Base.bracket_1
                   @ ()
                   @ ()
                   @ ()
                   SOE.arc2 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   Graphics.Rendering.OpenGL.GL.BeginEnd.$sglEnd
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case ww of wild { GHC.Types.I# i ->
                    case ww1 of wild1 { GHC.Types.I# i1 ->
                    case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glVertex3f
                           `cast`
                         (GHC.Ptr.FunPtr
                            (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds5
                           (GHC.Prim.double2Float# (GHC.Prim.int2Double# i))
                           (GHC.Prim.double2Float# (GHC.Prim.int2Double# i1))
                           __float 0.0
                           s of wild2 { (##) ds12 ->
                    case ww2 of wild3 { GHC.Types.I# i2 ->
                    case ww3 of wild4 { GHC.Types.I# i3 ->
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds5
                           (GHC.Prim.double2Float# (GHC.Prim.int2Double# i2))
                           (GHC.Prim.double2Float# (GHC.Prim.int2Double# i3))
                           __float 0.0
                           ds12 of wild5 { (##) ds1 ->
                    (# ds1, GHC.Tuple.() #) } } } } } } })
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   w) -}
ed3d9f8de06a90554c296bbcc5d4a158
  $wa6 ::
    SOE.Title
    -> GHC.Base.Maybe SOE.Size
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Window #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0] -}
5c82890eef97d447d5252dac46730282
  $wa7 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glVertex3f
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds5
                        (GHC.Prim.double2Float# (GHC.Prim.int2Double# ww))
                        (GHC.Prim.double2Float# (GHC.Prim.int2Double# ww1))
                        __float 0.0
                        w of wild { (##) ds12 ->
                 (# ds12, GHC.Tuple.() #) } }) -}
9f9a92af3d8e9b10bb7b768ead629eb2
  $wa8 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glVertex3f
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds5
                        (GHC.Prim.double2Float# (GHC.Prim.int2Double# ww))
                        (GHC.Prim.double2Float# (GHC.Prim.int2Double# ww1))
                        __float 0.0
                        w of wild { (##) ds12 ->
                 (# ds12, GHC.Tuple.() #) } }) -}
829190844a702d5d45537b533437bbb5
  $wa9 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><S,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Types.Int
                   ww1 :: GHC.Types.Int
                   w :: GHC.Base.String
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Graphics.Rendering.OpenGL.GL.CoordTrans.preservingMatrix1
                   @ ()
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case ww of wild { GHC.Types.I# i ->
                    case ww1 of wild1 { GHC.Types.I# i1 ->
                    case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glTranslatef
                           `cast`
                         (GHC.Ptr.FunPtr
                            (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds5
                           (GHC.Prim.double2Float# (GHC.Prim.int2Double# i))
                           (GHC.Prim.plusFloat#
                              (GHC.Prim.double2Float# (GHC.Prim.int2Double# i1))
                              __float 16.0)
                           __float 0.0
                           s of wild2 { (##) ds12 ->
                    case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glScalef
                           `cast`
                         (GHC.Ptr.FunPtr
                            (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P <GHC.Types.IO ()>_P))_R of ds1 { GHC.Ptr.FunPtr ds2 ->
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds2
                           __float 1.0
                           __float -1.0
                           __float 1.0
                           ds12 of wild3 { (##) ds3 ->
                    Graphics.UI.GLFW.renderString1
                      Graphics.UI.GLFW.Fixed8x16
                      w
                      ds3 } } } } } })
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   w1) -}
91c8221ac310c3d087ceffdae6d316f4
  $wbezier ::
    [SOE.Point]
    -> Graphics.Rendering.OpenGL.Raw.Types.GLfloat
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0] -}
ed1e63ca6cfc73dbad2c66b3d834bc07
  $wcreateEllipse ::
    SOE.Point -> SOE.Point -> (# SOE.Conjuction, [SOE.Conjuction] #)
  {- Arity: 2, Strictness: <L,U(U(U),U(U))><L,U(U(U),U(U))>,
     Inline: [0] -}
f2e4ef1297ca6ac38f14ce2d7cc15570
  $wcreatePolygon ::
    [SOE.Point] -> (# SOE.Conjuction, [SOE.Conjuction] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [SOE.Point] ->
                 case w of wild {
                   [] -> (# GHC.Types.[] @ SOE.Atom, GHC.Types.[] @ SOE.Conjuction #)
                   : ipv ipv1
                   -> (# GHC.Types.:
                           @ SOE.Atom
                           (SOE.Pos
                              (GHC.CString.unpackAppendCString#
                                 "P"#
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showList__3
                                    (case ipv of ww { (,) ww1 ww2 ->
                                     GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.shows9
                                       (case ww1 of ww4 { GHC.Types.I# ww3 ->
                                        case GHC.Show.$wshowSignedInt
                                               0
                                               ww3
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.showList__1
                                                  (GHC.List.foldr1_$sfoldr1
                                                     @ (GHC.Base.String -> GHC.Base.String)
                                                     GHC.Show.$fShow(,)1
                                                     (\ w2 :: GHC.Base.String ->
                                                      case ww2 of ww5 { GHC.Types.I# ww6 ->
                                                      case GHC.Show.$wshowSignedInt
                                                             0
                                                             ww6
                                                             w2 of ww7 { (#,#) ww8 ww9 ->
                                                      GHC.Types.: @ GHC.Types.Char ww8 ww9 } })
                                                     (GHC.Types.[] @ GHC.Show.ShowS)
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.shows8
                                                        (SOE.createPolygon_showl
                                                           ipv1)))) of ww5 { (#,#) ww6 ww7 ->
                                        GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) })),
                               (Control.Exception.Base.bracket_1
                                  @ ()
                                  @ ()
                                  @ ()
                                  SOE.createPolygon2 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                  Graphics.Rendering.OpenGL.GL.BeginEnd.$sglEnd
                                  (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                   case GHC.Base.map
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ (GHC.Types.IO ())
                                          SOE.createPolygon1
                                            `cast`
                                          (<(GHC.Types.Int, GHC.Types.Int)>_R
                                           ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                          wild of wild1 {
                                     []
                                     -> case GHC.List.foldr4
                                        ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                        of {}
                                     : x ds2
                                     -> case ds2 of wild2 {
                                          [] -> x `cast` (GHC.Types.NTCo:IO[0] <()>_R) eta
                                          : ipv2 ipv3
                                          -> case x `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                                                    eta of ds1 { (#,#) ipv4 ipv5 ->
                                             (GHC.List.foldr1_$sfoldr1
                                                @ (GHC.Types.IO ())
                                                (GHC.Base.thenIO1 @ () @ ())
                                                  `cast`
                                                (<GHC.Types.IO ()>_R
                                                 ->_R <GHC.Types.IO ()>_R
                                                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                                ipv2
                                                ipv3)
                                               `cast`
                                             (GHC.Types.NTCo:IO[0] <()>_R)
                                               ipv4 } } })
                                    `cast`
                                  (Sym (GHC.Types.NTCo:IO[0] <()>_R)))
                                 `cast`
                               (Sym (GHC.Types.NTCo:IO[0] <()>_R))))
                           (GHC.Types.[] @ SOE.Atom),
                         GHC.Types.[] @ SOE.Conjuction #) }) -}
347d0bb9ee782206d37d44288a95cb71
  $wcreateRectangle ::
    SOE.Point -> SOE.Point -> (# SOE.Conjuction, [SOE.Conjuction] #)
  {- Arity: 2, Strictness: <L,1*U(U(U),U(U))><L,1*U(U(U),U(U))>,
     Inline: [0] -}
216bb3d2d3689e7fee20830d1939fb60
  $wlineLength :: [SOE.Point] -> GHC.Prim.Float#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
b3b1cf6b9cc1f9a87f542a5ec71814d6
  $wnormaliseBounds ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (# Graphics.Rendering.OpenGL.Raw.Types.GLfloat,
          Graphics.Rendering.OpenGL.Raw.Types.GLfloat,
          Graphics.Rendering.OpenGL.Raw.Types.GLfloat,
          Graphics.Rendering.OpenGL.Raw.Types.GLfloat #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Types.Int
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int ->
                 (# case ww of wild { GHC.Types.I# x1 ->
                    case ww2 of wild1 { GHC.Types.I# y1 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x1 y1) of wild2 {
                      GHC.Types.False
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float# (GHC.Prim.int2Double# y1)))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                      GHC.Types.True
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float# (GHC.Prim.int2Double# x1)))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0])) } } },
                    case ww1 of wild { GHC.Types.I# x1 ->
                    case ww3 of wild1 { GHC.Types.I# y1 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x1 y1) of wild2 {
                      GHC.Types.False
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float# (GHC.Prim.int2Double# y1)))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                      GHC.Types.True
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float# (GHC.Prim.int2Double# x1)))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0])) } } },
                    case ww of wild { GHC.Types.I# x ->
                    case ww2 of wild1 { GHC.Types.I# y ->
                    let {
                      x1 :: GHC.Prim.Int# = GHC.Prim.-# x y
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.>=# x1 0) of wild2 {
                      GHC.Types.False
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float#
                               (GHC.Prim.int2Double# (GHC.Prim.negateInt# x1))))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                      GHC.Types.True
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float# (GHC.Prim.int2Double# x1)))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0])) } } },
                    case ww1 of wild { GHC.Types.I# x ->
                    case ww3 of wild1 { GHC.Types.I# y ->
                    let {
                      x1 :: GHC.Prim.Int# = GHC.Prim.-# x y
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.>=# x1 0) of wild2 {
                      GHC.Types.False
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float#
                               (GHC.Prim.int2Double# (GHC.Prim.negateInt# x1))))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                      GHC.Types.True
                      -> (GHC.Types.F#
                            (GHC.Prim.double2Float# (GHC.Prim.int2Double# x1)))
                           `cast`
                         (Sym (Foreign.C.Types.NTCo:CFloat[0])) } } } #)) -}
6caaf2b6c89e3085c3ffc3f111d5e282
  type Angle = Graphics.Rendering.OpenGL.Raw.Types.GLfloat
f6140737bb3eedf1852142a572a459ff
  data Atom = Pos SOE.Atom' | Neg SOE.Atom'
b60132dc5acd08e75bf11c19629432ae
  type Atom' = (GHC.Base.String, GHC.Types.IO ())
e255634fdac9ee548b1737e37f419e8e
  data Color
    = Black | Blue | Green | Cyan | Red | Magenta | Yellow | White
    Promotable
ad1312d5e32c8600a4e238ad24f58ea6
  type Conjuction = [SOE.Atom]
28dd942edef49358a746a306c6aa4e64
  data Event
    = Key {char :: GHC.Types.Char, isDown :: GHC.Types.Bool}
    | Button {pt :: SOE.Point,
              isLeft :: GHC.Types.Bool,
              isDown :: GHC.Types.Bool}
    | MouseMove {pt :: SOE.Point}
    | Resize Graphics.Rendering.OpenGL.GL.CoordTrans.Size
    | Refresh
    | Closed
d1e0913a29b1d0fc75392d9b00efcacd
  newtype Graphic = Graphic (GHC.Types.IO ())
d1ec474b79a3a3e962673895b9a15d68
  type Point = (GHC.Types.Int, GHC.Types.Int)
a330f439ffabf157a5bbbbf04740ffc8
  newtype RedrawMode = RedrawMode GHC.Types.Bool
    Promotable
f614556b3f42b9376d109e1ad70f16f8
  type Region = [SOE.Conjuction]
6044c4196722b28e17ffab6f290b1a8a
  data RegionOp = AND | OR | XOR | DIFF
    Promotable
3b518d40a6c4effc20b97b45d19d8eea
  type Size = (GHC.Types.Int, GHC.Types.Int)
71192b98b2a4584258664864b0e8708d
  type Title = GHC.Base.String
2dee452b983f74f1d6d94e784d3178de
  data Window
    = Window {graphicVar :: GHC.MVar.MVar
                              (SOE.Graphic, GHC.Types.Bool),
              eventsChan :: Control.Concurrent.Chan.Chan SOE.Event}
bc298fe4c7dc0c35f6f129887153271b
  andRegion :: SOE.Region -> SOE.Region -> SOE.Region
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ xs :: SOE.Region ys :: SOE.Region ->
                 letrec {
                   go8 :: [SOE.Conjuction] -> [SOE.Conjuction]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [SOE.Conjuction] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ SOE.Conjuction
                       : y ys1
                       -> let {
                            z :: [SOE.Conjuction] = go8 ys1
                          } in
                          letrec {
                            go9 :: [SOE.Conjuction] -> [SOE.Conjuction]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ ds1 :: [SOE.Conjuction] ->
                              case ds1 of wild1 {
                                [] -> z
                                : y1 ys2
                                -> GHC.Types.:
                                     @ SOE.Conjuction
                                     (GHC.Base.++ @ SOE.Atom y y1)
                                     (go9 ys2) }
                          } in
                          go9 ys }
                 } in
                 go8 xs) -}
e36fb5e79cf96aa6d5ee6f26a8293a01
  arc ::
    SOE.Point -> SOE.Point -> SOE.Angle -> SOE.Angle -> SOE.Graphic
  {- Arity: 5,
     Strictness: <S,1*U(U(U),U(U))><S,1*U(U(U),U(U))><L,U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.arc1
                  `cast`
                (<SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R <SOE.Angle>_R
                 ->_R <SOE.Angle>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
0be9fc21fcc5c9cd5ea9b612f3394392
  arc1 ::
    SOE.Point
    -> SOE.Point
    -> SOE.Angle
    -> SOE.Angle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,1*U(U(U),U(U))><S,1*U(U(U),U(U))><L,U(U)><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: SOE.Point
                   w1 :: SOE.Point
                   w2 :: SOE.Angle
                   w3 :: SOE.Angle
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case w1 of ww3 { (,) ww4 ww5 ->
                 SOE.$wa ww1 ww2 ww4 ww5 w2 w3 w4 } }) -}
57eccf39e3eddeaab52beb52ee733efc
  arc2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glBegin
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CUInt GHC.Word.Word32
                          ->_P <GHC.Types.IO ()>_P))_R of ds2 { GHC.Ptr.FunPtr ds3 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Word#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds3
                        __word 3
                        eta of wild { (##) ds6 ->
                 (# ds6, GHC.Tuple.() #) } }) -}
6145a69f760cd8ee9526c2ba175044ee
  char :: SOE.Event -> GHC.Types.Char
  RecSel SOE.Event
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: SOE.Event ->
                 case ds of wild { DEFAULT -> SOE.char1 SOE.Key ds1 ds2 -> ds1 }) -}
b173822eccaab5d5b3b0d7edbe5b80cb
  char1 :: GHC.Types.Char
  {- Strictness: b -}
a9c9da0f7de1472a9117376a9d3fa7f1
  clearWindow :: SOE.Window -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(1*U(U),A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.clearWindow1
                  `cast`
                (<SOE.Window>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3f8f46aff5c216aee7297982317f49ac
  clearWindow1 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(1*U(U),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ win :: SOE.Window
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.clearWindow3
                   win
                   SOE.clearWindow2
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0])))
                   eta) -}
bcc5c9ddad0abaa59028c7405ed475d9
  clearWindow2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
b3684949c527a34e740040e80a3e5240
  clearWindow3 ::
    SOE.Window
    -> SOE.Graphic
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(1*U(U),A)><L,C(U)><L,U>,
     Unfolding: (\ win :: SOE.Window
                   graphic :: SOE.Graphic
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.getMaskingState# eta of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case win of wild { SOE.Window ds2 ds3 ->
                      case ds2 of wild1 { GHC.MVar.MVar mvar# ->
                      case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ (SOE.Graphic, GHC.Types.Bool)
                             mvar#
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ (SOE.Graphic, GHC.Types.Bool)
                             @ GHC.Exception.SomeException
                             (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              (# eta1,
                                 ((\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                   case SOE.clearWindow4 s of ds5 { (#,#) ipv4 ipv5 ->
                                   graphic
                                     `cast`
                                   (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                                     ipv4 })
                                    `cast`
                                  (Trans
                                       (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                       (Sym (SOE.NTCo:Graphic[0]))),
                                  GHC.Types.True) #))
                             (\ e1 :: GHC.Exception.SomeException[OneShot]
                                eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (SOE.Graphic, GHC.Types.Bool)
                                     mvar#
                                     ipv3
                                     eta1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ (SOE.Graphic, GHC.Types.Bool)
                                e1
                                s2# })
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (SOE.Graphic, GHC.Types.Bool)
                             mvar#
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }
                   0
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case win of wild { SOE.Window ds2 ds3 ->
                         case ds2 of wild1 { GHC.MVar.MVar mvar# ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ (SOE.Graphic, GHC.Types.Bool)
                                mvar#
                                eta1 of ds4 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ (SOE.Graphic, GHC.Types.Bool)
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ (SOE.Graphic, GHC.Types.Bool)
                                   (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    (# eta2,
                                       ((\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         case SOE.clearWindow4 s of ds5 { (#,#) ipv4 ipv5 ->
                                         graphic
                                           `cast`
                                         (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                                           ipv4 })
                                          `cast`
                                        (Trans
                                             (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                             (Sym (SOE.NTCo:Graphic[0]))),
                                        GHC.Types.True) #)))
                                (\ e1 :: GHC.Exception.SomeException[OneShot]
                                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ (SOE.Graphic, GHC.Types.Bool)
                                        mvar#
                                        ipv3
                                        eta2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (SOE.Graphic, GHC.Types.Bool)
                                   e1
                                   s2# })
                                ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ (SOE.Graphic, GHC.Types.Bool)
                                mvar#
                                ipv5
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, GHC.Tuple.() #) } } } } })
                        ipv } }) -}
fe87595ac9fd4bbb6d669c2a5859d3b8
  clearWindow4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glClearColor
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P <GHC.Types.IO ()>_P))_R of ds5 { GHC.Ptr.FunPtr ds6 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds6
                        __float 0.0
                        __float 0.0
                        __float 0.0
                        __float 0.0
                        s of wild { (##) ds15 ->
                 Graphics.Rendering.OpenGL.GL.Framebuffer.clear1
                   SOE.clearWindow5
                   ds15 } }) -}
1595982d60bbc579836c265e43058e80
  clearWindow5 ::
    [Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer
                   Graphics.Rendering.OpenGL.GL.Framebuffer.ColorBuffer
                   SOE.clearWindow6) -}
124c6c463fa442de926b9dfcc5cf9a17
  clearWindow6 ::
    [Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer
                   Graphics.Rendering.OpenGL.GL.Framebuffer.StencilBuffer
                   (GHC.Types.[]
                      @ Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer)) -}
2905b31ca46c1ae8f4f228a5e0e52c69
  closeWindow :: SOE.Window -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(A,1*U(1*U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.closeWindow1
                  `cast`
                (<SOE.Window>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c29d11ea8fe3a886fa14f5e208977e90
  closeWindow1 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(A,1*U(1*U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: SOE.Window
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { SOE.Window ww1 ww2 ->
                 case ww2 of ww3 { Control.Concurrent.Chan.Chan ww4 ww5 ->
                 SOE.$wa2 ww4 ww5 w1 } }) -}
7602055bfe1c6576a7cd03e3209eddf2
  closeWindow2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.opened of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Bool
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.SomeException
                        SOE.closeWindow3
                        (\ e1 :: GHC.Exception.SomeException[OneShot]
                           eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ GHC.Types.Bool
                                mvar#
                                ipv1
                                eta1 of s2# { DEFAULT ->
                         GHC.Prim.raiseIO#
                           @ GHC.Exception.SomeException
                           @ GHC.Types.Bool
                           e1
                           s2# })
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Bool
                        mvar#
                        ipv3
                        ipv2 of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } }) -}
ca4632b91eba6f2983dfdd3d04d33492
  closeWindow3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Prim.unmaskAsyncExceptions#
                   @ GHC.Types.Bool
                   SOE.closeWindow4) -}
20eb098192f20599bcf85c39fc35a410
  closeWindow4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta, GHC.Types.False #)) -}
bfb1ea77ed0c6e4ee8ecb6866d2fb45a
  closeWindow5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.MVar.MVar GHC.Types.Bool #)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Bool
                        s' of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Bool
                        ipv1
                        GHC.Types.False
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.MVar.MVar @ GHC.Types.Bool ipv1 #) } } }) -}
987a3959154237689b2df734d4c7e890
  createEllipse :: SOE.Point -> SOE.Point -> SOE.Region
  {- Arity: 2, Strictness: <L,U(U(U),U(U))><L,U(U(U),U(U))>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: SOE.Point w1 :: SOE.Point ->
                 case SOE.$wcreateEllipse w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ SOE.Conjuction ww1 ww2 }) -}
7e6613decdbeea5b72afb5dad72627c1
  createPolygon :: [SOE.Point] -> SOE.Region
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [SOE.Point] ->
                 case SOE.$wcreatePolygon w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ SOE.Conjuction ww1 ww2 }) -}
3e0d0abf3e84baa650c0309d02500f48
  createPolygon1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 -> SOE.$wa3 ww4 ww6 w1 } } }) -}
9a3ad688d5a1c157f4cba15321db3e94
  createPolygon2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glBegin
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CUInt GHC.Word.Word32
                          ->_P <GHC.Types.IO ()>_P))_R of ds2 { GHC.Ptr.FunPtr ds3 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Word#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds3
                        __word 9
                        eta of wild { (##) ds6 ->
                 (# ds6, GHC.Tuple.() #) } }) -}
73a5ff7b338a4d2b7e0484be273fcd19
  createPolygon_showl ::
    [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7306501d47cbf13845f81955b733c041
  createRectangle :: SOE.Point -> SOE.Point -> SOE.Region
  {- Arity: 2, Strictness: <L,1*U(U(U),U(U))><L,1*U(U(U),U(U))>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: SOE.Point w1 :: SOE.Point ->
                 case SOE.$wcreateRectangle w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ SOE.Conjuction ww1 ww2 }) -}
38ef9bf584affd39ba338ca22ff805b4
  diffRegion :: SOE.Region -> SOE.Region -> SOE.Region
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a4 :: SOE.Region b :: SOE.Region ->
                 SOE.andRegion a4 (SOE.negTerm b)) -}
2af046e0903804ca8bf8e512bcfd9e86
  diffRegion1 :: SOE.Conjuction -> [[SOE.Atom]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ys :: SOE.Conjuction ->
                 GHC.Base.build
                   @ [SOE.Atom]
                   (\ @ b1 c1 :: [SOE.Atom] -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ SOE.Atom
                      @ b1
                      (GHC.Base.mapFB
                         @ [SOE.Atom]
                         @ b1
                         @ SOE.Atom
                         c1
                         SOE.diffRegion_negS)
                      n
                      ys)) -}
bde9a05ada8e8cb9987f7a284d1f5d62
  diffRegion_go ::
    [[SOE.Conjuction]] -> [SOE.Conjuction] -> [SOE.Conjuction]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
9b9e0e5be326b617dc3590897e5faf8d
  diffRegion_negS :: SOE.Atom -> SOE.Conjuction
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: SOE.Atom ->
                 case ds of wild {
                   SOE.Pos i
                   -> GHC.Types.: @ SOE.Atom (SOE.Neg i) (GHC.Types.[] @ SOE.Atom)
                   SOE.Neg i
                   -> GHC.Types.:
                        @ SOE.Atom
                        (SOE.Pos i)
                        (GHC.Types.[] @ SOE.Atom) }) -}
88f2d76a4d9ed9aa30d8483d1cbc8861
  drawBufferedGraphic :: SOE.RedrawMode
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                GHC.Types.True `cast` (Sym (SOE.NTCo:RedrawMode[0])) -}
17e284a8aadeee0add69bd5f84d17f03
  drawGraphic :: SOE.RedrawMode
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                GHC.Types.False `cast` (Sym (SOE.NTCo:RedrawMode[0])) -}
bbee0c425e9d5cada9f5ae7147626fa7
  drawInWindow :: SOE.Window -> SOE.Graphic -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*U(U),A)><L,C(U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.drawInWindow1
                  `cast`
                (<SOE.Window>_R
                 ->_R <SOE.Graphic>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e3721a24399611118f07cdc00c4d23f0
  drawInWindow1 ::
    SOE.Window
    -> SOE.Graphic
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*U(U),A)><L,C(U(U,U))><L,U>,
     Unfolding: (\ win :: SOE.Window
                   graphic :: SOE.Graphic
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.getMaskingState# eta of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case win of wild { SOE.Window ds2 ds3 ->
                      case ds2 of wild1 { GHC.MVar.MVar mvar# ->
                      case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ (SOE.Graphic, GHC.Types.Bool)
                             mvar#
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ (SOE.Graphic, GHC.Types.Bool)
                             @ GHC.Exception.SomeException
                             (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case ipv3 of wild2 { (,) g ds5 ->
                              (# eta1,
                                 ((GHC.Base.thenIO1
                                     @ ()
                                     @ ()
                                     g `cast` (SOE.NTCo:Graphic[0])
                                     graphic `cast` (SOE.NTCo:Graphic[0]))
                                    `cast`
                                  (Trans
                                       (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                       (Sym (SOE.NTCo:Graphic[0]))),
                                  GHC.Types.True) #) })
                             (\ e1 :: GHC.Exception.SomeException[OneShot]
                                eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (SOE.Graphic, GHC.Types.Bool)
                                     mvar#
                                     ipv3
                                     eta1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ (SOE.Graphic, GHC.Types.Bool)
                                e1
                                s2# })
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (SOE.Graphic, GHC.Types.Bool)
                             mvar#
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }
                   0
                   -> GHC.Prim.maskAsyncExceptions#
                        @ ()
                        (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case win of wild { SOE.Window ds2 ds3 ->
                         case ds2 of wild1 { GHC.MVar.MVar mvar# ->
                         case GHC.Prim.takeMVar#
                                @ GHC.Prim.RealWorld
                                @ (SOE.Graphic, GHC.Types.Bool)
                                mvar#
                                eta1 of ds4 { (#,#) ipv2 ipv3 ->
                         case GHC.Prim.catch#
                                @ (SOE.Graphic, GHC.Types.Bool)
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ (SOE.Graphic, GHC.Types.Bool)
                                   (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    case ipv3 of wild2 { (,) g ds5 ->
                                    (# eta2,
                                       ((GHC.Base.thenIO1
                                           @ ()
                                           @ ()
                                           g `cast` (SOE.NTCo:Graphic[0])
                                           graphic `cast` (SOE.NTCo:Graphic[0]))
                                          `cast`
                                        (Trans
                                             (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                             (Sym (SOE.NTCo:Graphic[0]))),
                                        GHC.Types.True) #) }))
                                (\ e1 :: GHC.Exception.SomeException[OneShot]
                                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ (SOE.Graphic, GHC.Types.Bool)
                                        mvar#
                                        ipv3
                                        eta2 of s2# { DEFAULT ->
                                 GHC.Prim.raiseIO#
                                   @ GHC.Exception.SomeException
                                   @ (SOE.Graphic, GHC.Types.Bool)
                                   e1
                                   s2# })
                                ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.putMVar#
                                @ GHC.Prim.RealWorld
                                @ (SOE.Graphic, GHC.Types.Bool)
                                mvar#
                                ipv5
                                ipv4 of s2# { DEFAULT ->
                         (# s2#, GHC.Tuple.() #) } } } } })
                        ipv } }) -}
d91633dbc9b411c4121499285b1bc81d
  drawInWindowNow :: SOE.Window -> SOE.Graphic -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(U),A)><L,C(U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.drawInWindowNow1
                  `cast`
                (<SOE.Window>_R
                 ->_R <SOE.Graphic>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
bd243491bb9aaacebd161c527b476f0a
  drawInWindowNow1 ::
    SOE.Window
    -> SOE.Graphic
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(U),A)><L,C(U(U,U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ win :: SOE.Window
                   graphic :: SOE.Graphic
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.drawInWindow1 win graphic eta of ds1 { (#,#) ipv ipv1 ->
                 SOE.drawInWindowNow2 win ipv }) -}
042957d3dfd3b037bb40101eec977319
  drawInWindowNow2 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*U(U),A)><L,U>,
     Unfolding: (\ win :: SOE.Window
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.getMaskingState# eta of ds { (#,#) ipv ipv1 ->
                 case ipv1 of ds1 {
                   DEFAULT
                   -> case win of wild { SOE.Window ds2 ds3 ->
                      case ds2 of wild1 { GHC.MVar.MVar mvar# ->
                      case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ (SOE.Graphic, GHC.Types.Bool)
                             mvar#
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.catch#
                             @ ((SOE.Graphic, GHC.Types.Bool), GHC.Types.IO ())
                             @ GHC.Exception.SomeException
                             (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case ipv3 of wild2 { (,) g dirty ->
                              (# s,
                                 ((g, GHC.Types.False),
                                  (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                   case dirty of wild3 {
                                     GHC.Types.False -> (# eta1, GHC.Tuple.() #)
                                     GHC.Types.True
                                     -> case g `cast`
                                             (Trans
                                                  (SOE.NTCo:Graphic[0])
                                                  (GHC.Types.NTCo:IO[0] <()>_R))
                                               eta1 of ds5 { (#,#) ipv4 ipv5 ->
                                        case {__pkg_ccall_GC GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwSwapBuffers GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld #)}
                                               ipv4 of wild4 { (##) ds6 ->
                                        (# ds6, GHC.Tuple.() #) } } })
                                    `cast`
                                  (Sym (GHC.Types.NTCo:IO[0] <()>_R))) #) })
                             (\ e1 :: GHC.Exception.SomeException[OneShot]
                                eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (SOE.Graphic, GHC.Types.Bool)
                                     mvar#
                                     ipv3
                                     eta1 of s2# { DEFAULT ->
                              GHC.Prim.raiseIO#
                                @ GHC.Exception.SomeException
                                @ ((SOE.Graphic, GHC.Types.Bool), GHC.Types.IO ())
                                e1
                                s2# })
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      case ipv5 of wild2 { (,) a' b1 ->
                      case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ (SOE.Graphic, GHC.Types.Bool)
                             mvar#
                             a'
                             ipv4 of s2# { DEFAULT ->
                      b1 `cast` (GHC.Types.NTCo:IO[0] <()>_R) s2# } } } } } }
                   0
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ (GHC.Types.IO ())
                             (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case win of wild { SOE.Window ds2 ds3 ->
                              case ds2 of wild1 { GHC.MVar.MVar mvar# ->
                              case GHC.Prim.takeMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (SOE.Graphic, GHC.Types.Bool)
                                     mvar#
                                     eta1 of ds4 { (#,#) ipv2 ipv3 ->
                              case GHC.Prim.catch#
                                     @ ((SOE.Graphic, GHC.Types.Bool), GHC.Types.IO ())
                                     @ GHC.Exception.SomeException
                                     (GHC.Prim.unmaskAsyncExceptions#
                                        @ ((SOE.Graphic, GHC.Types.Bool), GHC.Types.IO ())
                                        (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         case ipv3 of wild2 { (,) g dirty ->
                                         (# s,
                                            ((g, GHC.Types.False),
                                             (\ eta2 :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld[OneShot] ->
                                              case dirty of wild3 {
                                                GHC.Types.False -> (# eta2, GHC.Tuple.() #)
                                                GHC.Types.True
                                                -> case g `cast`
                                                        (Trans
                                                             (SOE.NTCo:Graphic[0])
                                                             (GHC.Types.NTCo:IO[0] <()>_R))
                                                          eta2 of ds5 { (#,#) ipv4 ipv5 ->
                                                   case {__pkg_ccall_GC GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwSwapBuffers GHC.Prim.State#
                                                                                                                                   GHC.Prim.RealWorld
                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                         GHC.Prim.RealWorld #)}
                                                          ipv4 of wild4 { (##) ds6 ->
                                                   (# ds6, GHC.Tuple.() #) } } })
                                               `cast`
                                             (Sym (GHC.Types.NTCo:IO[0] <()>_R))) #) }))
                                     (\ e1 :: GHC.Exception.SomeException[OneShot]
                                        eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                      case GHC.Prim.putMVar#
                                             @ GHC.Prim.RealWorld
                                             @ (SOE.Graphic, GHC.Types.Bool)
                                             mvar#
                                             ipv3
                                             eta2 of s2# { DEFAULT ->
                                      GHC.Prim.raiseIO#
                                        @ GHC.Exception.SomeException
                                        @ ((SOE.Graphic, GHC.Types.Bool), GHC.Types.IO ())
                                        e1
                                        s2# })
                                     ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild2 { (,) a' b1 ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ (SOE.Graphic, GHC.Types.Bool)
                                     mvar#
                                     a'
                                     ipv4 of s2# { DEFAULT ->
                              (# s2#, b1 #) } } } } } })
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      ipv3 `cast` (GHC.Types.NTCo:IO[0] <()>_R) ipv2 } } }) -}
50f06b34b0e1f669fc76fc70dcc78cff
  drawRegion :: SOE.Region -> SOE.Graphic
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.drawRegion1
                  `cast`
                (<SOE.Region>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
597d099e8209a750b498657b9fd55161
  drawRegion1 ::
    SOE.Region
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ term :: SOE.Region
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glStencilMask
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CUInt GHC.Word.Word32
                          ->_P <GHC.Types.IO ()>_P))_R of ds2 { GHC.Ptr.FunPtr ds3 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Word#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds3
                        __word 1
                        s of wild { (##) ds6 ->
                 case SOE.drawRegion10 `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                        ds6 of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   a4 :: [SOE.Conjuction]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds :: [SOE.Conjuction]
                       eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case ds of wild1 {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case SOE.drawRegion8 `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                                 eta of ds4 { (#,#) ipv2 ipv3 ->
                          case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                                  -> GHC.Prim.Word#
                                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                                 ds3
                                 __word 255
                                 ipv2 of wild2 { (##) ds5 ->
                          case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glStencilFunc
                                 `cast`
                               (GHC.Ptr.FunPtr
                                  (UnivCo opt_phantom phantom Foreign.C.Types.CUInt GHC.Word.Word32
                                   ->_P UnivCo opt_phantom phantom Foreign.C.Types.CInt GHC.Int.Int32
                                   ->_P UnivCo opt_phantom phantom Foreign.C.Types.CUInt GHC.Word.Word32
                                   ->_P <GHC.Types.IO ()>_P))_R of ds7 { GHC.Ptr.FunPtr ds8 ->
                          case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                                  -> GHC.Prim.Word#
                                                  -> GHC.Prim.Int#
                                                  -> GHC.Prim.Word#
                                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                                 ds8
                                 __word 516
                                 0
                                 __word 255
                                 ds5 of wild3 { (##) ds12 ->
                          case Graphics.Rendering.OpenGL.GL.PerFragment.$wa5
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpIncr
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpIncr
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpZero
                                 ds12 of ds9 { (#,#) ipv4 ipv5 ->
                          let {
                            ps :: [(GHC.Base.String, GHC.Types.IO ())] = SOE.drawRegion_posT y
                          } in
                          case SOE.drawRegion7 ps ipv4 of ds10 { (#,#) ipv6 ipv7 ->
                          case Graphics.Rendering.OpenGL.GL.PerFragment.$wa5
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpZero
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpZero
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpZero
                                 ipv6 of ds11 { (#,#) ipv8 ipv9 ->
                          case SOE.drawRegion6
                                 (SOE.drawRegion_negT y)
                                 ipv8 of ds13 { (#,#) ipv10 ipv11 ->
                          case SOE.drawRegion4 `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                                 ipv10 of ds14 { (#,#) ipv12 ipv13 ->
                          case GHC.List.$wlenAcc
                                 @ (GHC.Base.String, GHC.Types.IO ())
                                 ps
                                 0 of ww2 { DEFAULT ->
                          case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                                  -> GHC.Prim.Word#
                                                  -> GHC.Prim.Int#
                                                  -> GHC.Prim.Word#
                                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                                 ds8
                                 __word 514
                                 (GHC.Prim.narrow32Int# ww2)
                                 __word 255
                                 ipv12 of wild4 { (##) ds15 ->
                          case Graphics.Rendering.OpenGL.GL.PerFragment.$wa5
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpZero
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpZero
                                 Graphics.Rendering.OpenGL.GL.PerFragment.OpZero
                                 ds15 of ds16 { (#,#) ipv14 ipv15 ->
                          case SOE.drawRegion3 ps ipv14 of ds17 { (#,#) ipv16 ipv17 ->
                          a4 ys ipv16 } } } } } } } } } } } } } }
                 } in
                 case a4 term ipv of ds4 { (#,#) ipv2 ipv3 ->
                 SOE.drawRegion2 `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                   ipv2 } } } }) -}
853d33c57afb619f27d10f8d608a9a75
  drawRegion10 :: GHC.Types.IO ()
  {- Unfolding: (case Graphics.Rendering.OpenGL.GL.PerFragment.stencilTest of wild { Data.StateVar.StateVar ds1 s ->
                 s Graphics.Rendering.OpenGL.GL.Capability.Enabled }) -}
5a8ee851903303780fd2dbfda633f43d
  drawRegion2 :: GHC.Types.IO ()
  {- Unfolding: (case Graphics.Rendering.OpenGL.GL.PerFragment.stencilTest of wild { Data.StateVar.StateVar ds1 s ->
                 s Graphics.Rendering.OpenGL.GL.Capability.Disabled }) -}
68e7f1eaa2c316296eaf78ce5ffd5241
  drawRegion3 ::
    [(GHC.Base.String, GHC.Types.IO ())]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
3fb60665403cb516e3aeb7e305649044
  drawRegion4 :: GHC.Types.IO ()
  {- Unfolding: (case Graphics.Rendering.OpenGL.GL.PerFragment.depthFunc of wild { Data.StateVar.StateVar ds1 s ->
                 s SOE.drawRegion5 }) -}
1ecda8735366bc8eaa7d0109a890ea6a
  drawRegion5 ::
    GHC.Base.Maybe
      Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction
                   Graphics.Rendering.OpenGL.GL.ComparisonFunction.Always) -}
04f9e7068e4bb4739cf0dd2705faf86d
  drawRegion6 ::
    [(GHC.Base.String, GHC.Types.IO ())]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
c2914627a06594b51e468b8ea58aabe5
  drawRegion7 ::
    [(GHC.Base.String, GHC.Types.IO ())]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
50034a553233b69761a473c7c70fb0b3
  drawRegion8 :: GHC.Types.IO ()
  {- Unfolding: (case Graphics.Rendering.OpenGL.GL.PerFragment.depthFunc of wild { Data.StateVar.StateVar ds1 s ->
                 s SOE.drawRegion9 }) -}
f496848505b7e4e6998b6c3bc15eaecd
  drawRegion9 ::
    GHC.Base.Maybe
      Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction
                   Graphics.Rendering.OpenGL.GL.ComparisonFunction.Never) -}
5973368be14068c5e9f3d3ba250d851d
  drawRegion_negT :: [SOE.Atom] -> [SOE.Atom']
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
066fd0d8d1156a879d91ed037e38ca7f
  drawRegion_posT :: [SOE.Atom] -> [SOE.Atom']
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
36a58cdfad3e2d85d71eaa289cc60ac3
  ellipse :: SOE.Point -> SOE.Point -> SOE.Graphic
  {- Arity: 3, Strictness: <L,U(U(U),U(U))><L,U(U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.ellipse1
                  `cast`
                (<SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
98e6e8b330952190f0a1ed38740f8561
  ellipse1 ::
    SOE.Point
    -> SOE.Point
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U(U),U(U))><L,U(U(U),U(U))><S,U>,
     Unfolding: (\ pt2 :: SOE.Point
                   pt3 :: SOE.Point
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Graphics.Rendering.OpenGL.GL.CoordTrans.preservingMatrix1
                   @ ()
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case pt2 of ww { (,) ww1 ww2 ->
                    case pt3 of ww3 { (,) ww4 ww5 ->
                    case SOE.$wnormaliseBounds
                           ww1
                           ww2
                           ww4
                           ww5 of ww6 { (#,,,#) ww7 ww8 ww9 ww10 ->
                    case ww7
                           `cast`
                         (Foreign.C.Types.NTCo:CFloat[0]) of wild { GHC.Types.F# x ->
                    case ww9
                           `cast`
                         (Foreign.C.Types.NTCo:CFloat[0]) of wild1 { GHC.Types.F# x1 ->
                    case ww8
                           `cast`
                         (Foreign.C.Types.NTCo:CFloat[0]) of wild2 { GHC.Types.F# x2 ->
                    case ww10
                           `cast`
                         (Foreign.C.Types.NTCo:CFloat[0]) of wild3 { GHC.Types.F# x3 ->
                    case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glTranslatef
                           `cast`
                         (GHC.Ptr.FunPtr
                            (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                    let {
                      y :: GHC.Prim.Float# = GHC.Prim.divideFloat# x1 __float 2.0
                    } in
                    let {
                      y1 :: GHC.Prim.Float# = GHC.Prim.divideFloat# x3 __float 2.0
                    } in
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds5
                           (GHC.Prim.plusFloat# x y)
                           (GHC.Prim.plusFloat# x2 y1)
                           __float 0.0
                           s of wild4 { (##) ds12 ->
                    Control.Exception.Base.bracket_1
                      @ ()
                      @ ()
                      @ ()
                      SOE.createPolygon2 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      Graphics.Rendering.OpenGL.GL.BeginEnd.$sglEnd
                      (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                       SOE.$wa1
                         (GHC.Types.F# y) `cast` (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                         (GHC.Types.F# y1) `cast` (Sym (Foreign.C.Types.NTCo:CFloat[0]))
                         __float 0.0
                         __float 6.2831855
                         (case GHC.Prim.divideFloat#
                                 __float 20.0
                                 (GHC.Prim.plusFloat# y y1) of wild5 { DEFAULT ->
                          (GHC.Types.F# wild5)
                            `cast`
                          (Sym (Foreign.C.Types.NTCo:CFloat[0])) })
                         w)
                        `cast`
                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      ds12 } } } } } } } } })
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   eta) -}
5557c25ca7e5ded1c5f1264b718387a3
  emptyGraphic :: SOE.Graphic
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.clearWindow4
                  `cast`
                (Trans
                     (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
cc6030b3f4486a7b2fdff294fa5eefac
  eventsChan :: SOE.Window -> Control.Concurrent.Chan.Chan SOE.Event
  RecSel SOE.Window
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: SOE.Window ->
                 case ds of wild { SOE.Window ds1 ds2 -> ds2 }) -}
7b1b5f75a26c89d8675a18a9a209fd43
  getKey :: SOE.Window -> GHC.Types.IO GHC.Types.Char
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.getKey1
                  `cast`
                (<SOE.Window>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Char>_R)) -}
dbe821541e3c231403b33dc929dfba3c
  getKey1 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: (\ win :: SOE.Window
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.getKey2 win GHC.Types.True eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { GHC.Types.C# c1 ->
                 case c1 of wild1 {
                   DEFAULT -> SOE.getKey2 win GHC.Types.False ipv
                   '\NUL' -> ds1 } } }) -}
d30cd755d6d67f6018f08cb468e1a30b
  getKey2 ::
    SOE.Window
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
  {- Arity: 3, Strictness: <L,U(U(U),U(U,U))><L,U><L,U>,
     Unfolding: (\ win :: SOE.Window
                   down :: GHC.Types.Bool
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.getKey4 win eta of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   a4 :: SOE.Event
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Char #)
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ e :: SOE.Event
                       eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case e of wild {
                       DEFAULT
                       -> case SOE.getKey4 win eta1 of ds2 { (#,#) ipv2 ipv3 ->
                          a4 ipv3 ipv2 }
                       SOE.Key ds ds2
                       -> case ds2 of wild1 {
                            GHC.Types.False
                            -> case down of wild2 {
                                 GHC.Types.False -> (# eta1, ds #)
                                 GHC.Types.True
                                 -> case SOE.getKey4 win eta1 of ds3 { (#,#) ipv2 ipv3 ->
                                    a4 ipv3 ipv2 } }
                            GHC.Types.True
                            -> case down of wild2 {
                                 GHC.Types.False
                                 -> case SOE.getKey4 win eta1 of ds3 { (#,#) ipv2 ipv3 ->
                                    a4 ipv3 ipv2 }
                                 GHC.Types.True -> (# eta1, ds #) } }
                       SOE.Closed -> (# eta1, SOE.getKey3 #) }
                 } in
                 a4 ipv1 ipv }) -}
f9e343a61e2ec799586d22e09aaadc9a
  getKey3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\NUL') -}
5e49a2eb0a8df7f239c11f8583f329f4
  getKey4 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Event #)
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U> -}
02b5772b866b2db6836ac2717477fe90
  getLBP :: SOE.Window -> GHC.Types.IO SOE.Point
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.getLBP1
                  `cast`
                (<SOE.Window>_R ->_R Sym (GHC.Types.NTCo:IO[0] <SOE.Point>_R)) -}
4e0dd5d71ad3d94dd864363389250575
  getLBP1 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Point #)
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ w :: SOE.Window
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.getLBP3 w SOE.getLBP2 GHC.Types.True eta) -}
b8aec002aec8a8edb0fd6f2f93441065
  getLBP2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
409e89eaf0bf724a29d50634be50e8a5
  getLBP3 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Point #)
  {- Arity: 4, Strictness: <L,U(U(U),U(U,U))><L,A><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Bool
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.$wa4 w w2 w3) -}
2bd13f162cef222167ecd5044b7d1ab6
  getRBP :: SOE.Window -> GHC.Types.IO SOE.Point
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.getLBP1
                  `cast`
                (<SOE.Window>_R ->_R Sym (GHC.Types.NTCo:IO[0] <SOE.Point>_R)) -}
19dfd9cec0d2669960f1378633ed046a
  getWindowEvent :: SOE.Window -> GHC.Types.IO SOE.Event
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.getKey4
                  `cast`
                (<SOE.Window>_R ->_R Sym (GHC.Types.NTCo:IO[0] <SOE.Event>_R)) -}
fc27340cc02b2f1763d499a075f7b5a5
  getWindowSize :: SOE.Window -> GHC.Types.IO SOE.Size
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                SOE.getWindowSize1
                  `cast`
                (<SOE.Window>_R ->_R Sym (GHC.Types.NTCo:IO[0] <SOE.Size>_R)) -}
a23a275f25feee08bcc73c8a2e6dffe6
  getWindowSize1 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Size #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ win :: SOE.Window
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.getWindowSize2 eta) -}
d55d8be04ef2b7f267252d4d307d122e
  getWindowSize2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Size #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4
                        4
                        s of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv1
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 let {
                   a32 :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        a32
                        0
                        0
                        ipv2 of s2 { DEFAULT ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4
                        4
                        s2 of ds1 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 let {
                   a33 :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        a33
                        0
                        0
                        ipv6 of s1 { DEFAULT ->
                 case {__pkg_ccall GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwGetWindowSize GHC.Prim.Addr#
                                                                                              -> GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld #)}
                        a32
                        a33
                        s1 of wild { (##) ds ->
                 case GHC.Prim.readInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        a32
                        0
                        ds of ds6 { (#,#) ipv8 ipv9 ->
                 case GHC.Prim.readInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        a33
                        0
                        ipv8 of ds7 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.Prim.ByteArray#
                        ipv7
                        ipv10 of s4 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.Prim.ByteArray#
                        ipv3
                        s4 of s3 { DEFAULT ->
                 (# s3,
                    (GHC.Types.I# (GHC.Prim.narrow32Int# ipv9),
                     GHC.Types.I#
                       (GHC.Prim.narrow32Int# ipv11)) #) } } } } } } } } } } }) -}
d07fba4e1e25a4d5f6a16bac96c1674e
  graphicVar ::
    SOE.Window -> GHC.MVar.MVar (SOE.Graphic, GHC.Types.Bool)
  RecSel SOE.Window
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: SOE.Window ->
                 case ds of wild { SOE.Window ds1 ds2 -> ds1 }) -}
2006e2f92752c06c9b573302219d9755
  isDown :: SOE.Event -> GHC.Types.Bool
  RecSel SOE.Event
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: SOE.Event ->
                 case ds of wild {
                   DEFAULT -> SOE.isDown1
                   SOE.Key ds1 ds2 -> ds2
                   SOE.Button ds1 ds2 ds3 -> ds3 }) -}
4c6ba404808076b1efcf568267741acd
  isDown1 :: GHC.Types.Bool
  {- Strictness: b -}
47e292fee8d2fa8eb1324826481da5df
  isLeft :: SOE.Event -> GHC.Types.Bool
  RecSel SOE.Event
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: SOE.Event ->
                 case ds of wild {
                   DEFAULT -> SOE.isLeft1 SOE.Button ds1 ds2 ds3 -> ds2 }) -}
5477e35d855ec13008ebc09c6d3a99f6
  isLeft1 :: GHC.Types.Bool
  {- Strictness: b -}
2e454cd8ee2d78bf967ccc01d5c5704a
  line :: SOE.Point -> SOE.Point -> SOE.Graphic
  {- Arity: 3, Strictness: <S,1*U(U(U),U(U))><S,1*U(U(U),U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.line1
                  `cast`
                (<(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
9b38395767d739a6ce42341e7830f817
  line1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U(U(U),U(U))><S,1*U(U(U),U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: (GHC.Types.Int, GHC.Types.Int)
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case w1 of ww3 { (,) ww4 ww5 -> SOE.$wa5 ww1 ww2 ww4 ww5 w2 } }) -}
0fc5704b1c5e729be1f761b7d0107d59
  maybeGetWindowEvent ::
    SOE.Window -> GHC.Types.IO (GHC.Base.Maybe SOE.Event)
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.maybeGetWindowEvent1
                  `cast`
                (<SOE.Window>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.Maybe SOE.Event>_R)) -}
119da4af1dd04478c3b26fdcb8ca1573
  maybeGetWindowEvent1 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe SOE.Event #)
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U> -}
20d2e7369ea544394533c9707d383b3d
  negTerm :: [SOE.Conjuction] -> [SOE.Conjuction]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [SOE.Conjuction] ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ SOE.Conjuction
                   : ipv ipv1
                   -> case GHC.Base.map
                             @ [SOE.Atom]
                             @ [SOE.Conjuction]
                             SOE.diffRegion1
                             wild of wild1 {
                        [] -> GHC.List.foldl2 @ [SOE.Conjuction]
                        : x xs -> SOE.diffRegion_go xs x } }) -}
28afe041e5e4e21f88c408b0031c29a4
  openWindow :: SOE.Title -> SOE.Size -> GHC.Types.IO SOE.Window
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.openWindow1
                  `cast`
                (<SOE.Title>_R
                 ->_R <SOE.Size>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <SOE.Window>_R)) -}
60855a9e52226363faf6e04d7fc073c0
  openWindow1 ::
    SOE.Title
    -> SOE.Size
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Window #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ title :: SOE.Title
                   size :: SOE.Size
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.openWindow2
                   title
                   (GHC.Base.Nothing @ SOE.Point)
                   (GHC.Base.Just @ SOE.Size size)
                   GHC.Types.True `cast` (Sym (SOE.NTCo:RedrawMode[0]))
                   eta) -}
cba19f1885117685cc775bf12750b813
  openWindow2 ::
    SOE.Title
    -> GHC.Base.Maybe SOE.Point
    -> GHC.Base.Maybe SOE.Size
    -> SOE.RedrawMode
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, SOE.Window #)
  {- Arity: 5, Strictness: <L,U><L,A><L,1*U><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ w :: SOE.Title
                   w1 :: GHC.Base.Maybe SOE.Point
                   w2 :: GHC.Base.Maybe SOE.Size
                   w3 :: SOE.RedrawMode
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.$wa6 w w2 w4) -}
3ee868362db8ae6c433b1b2974ee3cf8
  openWindowEx ::
    SOE.Title
    -> GHC.Base.Maybe SOE.Point
    -> GHC.Base.Maybe SOE.Size
    -> SOE.RedrawMode
    -> GHC.Types.IO SOE.Window
  {- Arity: 5, Strictness: <L,U><L,A><L,1*U><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.openWindow2
                  `cast`
                (<SOE.Title>_R
                 ->_R <GHC.Base.Maybe SOE.Point>_R
                 ->_R <GHC.Base.Maybe SOE.Size>_R
                 ->_R <SOE.RedrawMode>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <SOE.Window>_R)) -}
5796355bca8b805441e30e8311996e6d
  opened :: GHC.MVar.MVar GHC.Types.Bool
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (GHC.MVar.MVar GHC.Types.Bool)
                   SOE.closeWindow5
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <GHC.MVar.MVar GHC.Types.Bool>_R))) -}
b4e55d6ab7c7e8327365d996cc41780c
  orRegion :: SOE.Region -> SOE.Region -> SOE.Region
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True) (GHC.Base.++ @ [SOE.Atom]) -}
0cc989076544ee033a2a966036f88252
  overGraphic :: SOE.Graphic -> SOE.Graphic -> SOE.Graphic
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U(U,U))><L,C(U(U,A))>,
     Unfolding: InlineRule (0, True, True)
                SOE.overGraphic1
                  `cast`
                (<SOE.Graphic>_R
                 ->_R <SOE.Graphic>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
ade102ce607c1eafcf8380b1608d27ba
  overGraphic1 ::
    SOE.Graphic
    -> SOE.Graphic
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U(U,U))><L,C(U(U,A))>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: SOE.Graphic
                   ds1 :: SOE.Graphic
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.Base.thenIO1
                   @ ()
                   @ ()
                   ds1 `cast` (SOE.NTCo:Graphic[0])
                   ds `cast` (SOE.NTCo:Graphic[0])
                   eta) -}
021347a2c6d666d3f42099f67568c755
  overGraphics :: [SOE.Graphic] -> SOE.Graphic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [SOE.Graphic] ->
                 case ds of wild {
                   [] -> GHC.List.foldl2 @ SOE.Graphic
                   : x xs -> SOE.overGraphics_go xs x }) -}
4a3f1d90cd3507bd1d853b32fb5d269c
  overGraphics_go :: [SOE.Graphic] -> SOE.Graphic -> SOE.Graphic
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
fbe130418fa94d454473956c0f2b0c11
  polyBezier :: [SOE.Point] -> SOE.Graphic
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.polyBezier1
                  `cast`
                (<[SOE.Point]>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
20da640a94f7e4a2d04af3495544b502
  polyBezier1 ::
    [SOE.Point]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ds :: [SOE.Point]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   [] -> (# eta, GHC.Tuple.() #)
                   : ipv ipv1
                   -> SOE.polyBezier2
                        (GHC.Base.map
                           @ Foreign.C.Types.CFloat
                           @ (GHC.Types.Int, GHC.Types.Int)
                           (\ w :: Graphics.Rendering.OpenGL.Raw.Types.GLfloat ->
                            case SOE.$wbezier wild w of ww { (#,#) ww1 ww2 -> (ww1, ww2) })
                           (SOE.$w$ssegment
                              __float 0.0
                              __float 1.0
                              (case SOE.$wlineLength wild of ww { DEFAULT ->
                               case GHC.Prim.divideFloat#
                                      __float 1.0
                                      (GHC.Prim.divideFloat# ww __float 8.0) of wild2 { DEFAULT ->
                               (GHC.Types.F# wild2)
                                 `cast`
                               (Sym (Foreign.C.Types.NTCo:CFloat[0])) } })))
                        eta }) -}
34977e39fa5b97ebeab70ecebb8eab89
  polyBezier2 ::
    [SOE.Point]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ ps :: [SOE.Point]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Control.Exception.Base.bracket_1
                   @ ()
                   @ ()
                   @ ()
                   SOE.arc2 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   Graphics.Rendering.OpenGL.GL.BeginEnd.$sglEnd
                   (case GHC.Base.map
                           @ (GHC.Types.Int, GHC.Types.Int)
                           @ (GHC.Types.IO ())
                           SOE.polyBezier3
                             `cast`
                           (<(GHC.Types.Int, GHC.Types.Int)>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                           ps of wild {
                      [] -> GHC.List.foldr4 @ (GHC.Types.IO ())
                      : x ds2
                      -> case ds2 of wild1 {
                           [] -> x
                           : ipv ipv1
                           -> (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                               case x `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                                      s of ds1 { (#,#) ipv2 ipv3 ->
                               (GHC.List.foldr1_$sfoldr1
                                  @ (GHC.Types.IO ())
                                  (GHC.Base.thenIO1 @ () @ ())
                                    `cast`
                                  (<GHC.Types.IO ()>_R
                                   ->_R <GHC.Types.IO ()>_R
                                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                  ipv
                                  ipv1)
                                 `cast`
                               (GHC.Types.NTCo:IO[0] <()>_R)
                                 ipv2 })
                                `cast`
                              (Sym (GHC.Types.NTCo:IO[0] <()>_R)) } })
                   eta) -}
867de88bab1a911aca872a78c19047af
  polyBezier3 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 -> SOE.$wa7 ww4 ww6 w1 } } }) -}
c5e7101f86f655b477befbb354ec09ff
  polygon :: [SOE.Point] -> SOE.Graphic
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.polygon1
                  `cast`
                (<[SOE.Point]>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
9935ebfd0d65b6866e3f46141e8213bc
  polygon1 ::
    [SOE.Point]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ ps :: [SOE.Point]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Control.Exception.Base.bracket_1
                   @ ()
                   @ ()
                   @ ()
                   SOE.createPolygon2 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                   Graphics.Rendering.OpenGL.GL.BeginEnd.$sglEnd
                   (case GHC.Base.map
                           @ (GHC.Types.Int, GHC.Types.Int)
                           @ (GHC.Types.IO ())
                           SOE.polygon2
                             `cast`
                           (<(GHC.Types.Int, GHC.Types.Int)>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                           ps of wild {
                      [] -> GHC.List.foldr4 @ (GHC.Types.IO ())
                      : x ds2
                      -> case ds2 of wild1 {
                           [] -> x
                           : ipv ipv1
                           -> (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                               case x `cast` (GHC.Types.NTCo:IO[0] <()>_R)
                                      s of ds1 { (#,#) ipv2 ipv3 ->
                               (GHC.List.foldr1_$sfoldr1
                                  @ (GHC.Types.IO ())
                                  (GHC.Base.thenIO1 @ () @ ())
                                    `cast`
                                  (<GHC.Types.IO ()>_R
                                   ->_R <GHC.Types.IO ()>_R
                                   ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                  ipv
                                  ipv1)
                                 `cast`
                               (GHC.Types.NTCo:IO[0] <()>_R)
                                 ipv2 })
                                `cast`
                              (Sym (GHC.Types.NTCo:IO[0] <()>_R)) } })
                   eta) -}
a3b79b8e786c3a361541d71014b3e4d4
  polygon2 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 -> SOE.$wa8 ww4 ww6 w1 } } }) -}
05552aa571f004be9df56c5493cd37d8
  polyline :: [SOE.Point] -> SOE.Graphic
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.polyBezier2
                  `cast`
                (<[SOE.Point]>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
f85f21623a5ba67fd7431c83031fbba4
  pt :: SOE.Event -> SOE.Point
  RecSel SOE.Event
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: SOE.Event ->
                 case ds of wild {
                   DEFAULT -> SOE.pt1
                   SOE.Button ds1 ds2 ds3 -> ds1
                   SOE.MouseMove ds1 -> ds1 }) -}
0188ef60b56faaf2cc4dca53f46a2f82
  pt1 :: SOE.Point
  {- Strictness: b -}
6a8ef39439cd8236950ee2c1c83f48b1
  runGraphics :: GHC.Types.IO () -> GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ main :: GHC.Types.IO () -> main) -}
c4e8fb97896ffa2de90d0d748b7d186a
  setGraphic :: SOE.Window -> SOE.Graphic -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U(1*U(U),A)><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.clearWindow3
                  `cast`
                (<SOE.Window>_R
                 ->_R <SOE.Graphic>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1a8001ee37ebec0e9f329160a570115e
  shearEllipse :: SOE.Point -> SOE.Point -> SOE.Point -> SOE.Graphic
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),1*U(U))><L,1*U(U(U),U(U))><L,1*U(U(U),U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.shearEllipse1
                  `cast`
                (<SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
c54d93a5e6d5ac1d674078464b1bb481
  shearEllipse1 ::
    SOE.Point
    -> SOE.Point
    -> SOE.Point
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U),1*U(U))><L,1*U(U(U),U(U))><L,1*U(U(U),U(U))><L,U> -}
f33e1f62519fc864e00066715634f98b
  text :: SOE.Point -> GHC.Base.String -> SOE.Graphic
  {- Arity: 3, Strictness: <S,1*U(U(U),U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.text1
                  `cast`
                (<(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
fc3cc9e430fe1ecae050c149adfd7913
  text1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U(U(U),U(U))><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: GHC.Base.String
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 -> SOE.$wa9 ww1 ww2 w1 w2 }) -}
74d2f415dbed0b9294567f045db4ad2a
  timeGetTime :: GHC.Types.IO GHC.Word.Word32
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.timeGetTime1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <GHC.Word.Word32>_R)) -}
d9b8c146f8d856ef223fb62635c2ad17
  timeGetTime1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Word.Word32 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case {__pkg_ccall GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML glfwGetTime GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Double# #)}
                        s of wild { (#,#) ds1 ds2 ->
                 (# ds1,
                    case {__pkg_ccall base-4.8.1.0 rintDouble GHC.Prim.Double#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Double# #)}
                           (GHC.Prim.*## ds2 1000.0)
                           GHC.Prim.realWorld# of wild1 { (#,#) ds4 ds3 ->
                    GHC.Word.W32#
                      (GHC.Prim.narrow32Word#
                         (GHC.Prim.int2Word# (GHC.Prim.double2Int# ds3))) } #) }) -}
fef9b6344ab4ad09feb4c6ddce2aad7b
  withColor :: SOE.Color -> SOE.Graphic -> SOE.Graphic
  {- Arity: 3, Strictness: <S,1*U><C(S),1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                SOE.withColor1
                  `cast`
                (<SOE.Color>_R
                 ->_R <SOE.Graphic>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))) -}
1359cfb2890979bfc7c4a0e7155fd8dd
  withColor1 ::
    SOE.Color
    -> SOE.Graphic
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U><C(S),1*C1(U(U,U))><S,U>,
     Unfolding: (\ color :: SOE.Color
                   ds :: SOE.Graphic
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case color of wild {
                   SOE.Black
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 0.0
                             __float 0.0
                             __float 0.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } }
                   SOE.Blue
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 0.0
                             __float 0.0
                             __float 1.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } }
                   SOE.Green
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 0.0
                             __float 1.0
                             __float 0.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } }
                   SOE.Cyan
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 0.0
                             __float 1.0
                             __float 1.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } }
                   SOE.Red
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 1.0
                             __float 0.0
                             __float 0.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } }
                   SOE.Magenta
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 1.0
                             __float 0.0
                             __float 1.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } }
                   SOE.Yellow
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 1.0
                             __float 1.0
                             __float 0.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } }
                   SOE.White
                   -> case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                             `cast`
                           (GHC.Ptr.FunPtr
                              (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                               ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.Float#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds5
                             __float 1.0
                             __float 1.0
                             __float 1.0
                             s of wild1 { (##) ds12 ->
                      ds
                        `cast`
                      (Trans (SOE.NTCo:Graphic[0]) (GHC.Types.NTCo:IO[0] <()>_R))
                        ds12 } } }) -}
46c74b46a1e0f969b8d9688a77113012
  word32ToInt :: GHC.Word.Word32 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GHC.Word.Word32 ->
                 case ds of wild { GHC.Word.W32# x# ->
                 GHC.Types.I# (GHC.Prim.word2Int# x#) }) -}
95f12df71cdeab174a52652304008b77
  xorRegion :: SOE.Region -> SOE.Region -> SOE.Region
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ a4 :: SOE.Region b :: SOE.Region ->
                 GHC.Base.++
                   @ [SOE.Atom]
                   (SOE.andRegion (SOE.negTerm a4) b)
                   (SOE.andRegion a4 (SOE.negTerm b))) -}
instance GHC.Enum.Bounded [SOE.Color] = SOE.$fBoundedColor
instance GHC.Enum.Enum [SOE.Color] = SOE.$fEnumColor
instance GHC.Classes.Eq [SOE.Color] = SOE.$fEqColor
instance GHC.Arr.Ix [SOE.Color] = SOE.$fIxColor
instance GHC.Classes.Ord [SOE.Color] = SOE.$fOrdColor
instance GHC.Read.Read [SOE.Color] = SOE.$fReadColor
instance GHC.Show.Show [SOE.Atom] = SOE.$fShowAtom
instance GHC.Show.Show [SOE.Color] = SOE.$fShowColor
instance GHC.Show.Show [SOE.Event] = SOE.$fShowEvent
"SPEC/SOE $= @ (SettableStateVar CharCallback) @ (Char
                                                 -> KeyButtonState -> IO ())" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                              (Data.StateVar.SettableStateVar
                                                                                                                                                                 Graphics.UI.GLFW.CharCallback)
                                                                                                                                                              (GHC.Types.Char
                                                                                                                                                               -> Graphics.UI.GLFW.KeyButtonState
                                                                                                                                                               -> GHC.Types.IO
                                                                                                                                                                    ())
  Data.StateVar.$= @ (Data.StateVar.SettableStateVar
                        Graphics.UI.GLFW.CharCallback)
                   @ (GHC.Types.Char
                      -> Graphics.UI.GLFW.KeyButtonState -> GHC.Types.IO ())
                   tpl
  = Data.StateVar.$fHasSetterSettableStateVara_$c$=
      @ (GHC.Types.Char
         -> Graphics.UI.GLFW.KeyButtonState -> GHC.Types.IO ())
"SPEC/SOE $= @ (SettableStateVar MouseButtonCallback) @ (MouseButton
                                                        -> KeyButtonState -> IO ())" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                                                   (Data.StateVar.SettableStateVar
                                                                                                                                                                                      Graphics.UI.GLFW.MouseButtonCallback)
                                                                                                                                                                                   (Graphics.UI.GLFW.MouseButton
                                                                                                                                                                                    -> Graphics.UI.GLFW.KeyButtonState
                                                                                                                                                                                    -> GHC.Types.IO
                                                                                                                                                                                         ())
  Data.StateVar.$= @ (Data.StateVar.SettableStateVar
                        Graphics.UI.GLFW.MouseButtonCallback)
                   @ (Graphics.UI.GLFW.MouseButton
                      -> Graphics.UI.GLFW.KeyButtonState -> GHC.Types.IO ())
                   tpl
  = Data.StateVar.$fHasSetterSettableStateVara_$c$=
      @ (Graphics.UI.GLFW.MouseButton
         -> Graphics.UI.GLFW.KeyButtonState -> GHC.Types.IO ())
"SPEC/SOE $= @ (SettableStateVar MousePosCallback) @ (Position
                                                     -> IO ())" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                        (Data.StateVar.SettableStateVar
                                                                                                                                                           Graphics.UI.GLFW.MousePosCallback)
                                                                                                                                                        (Graphics.Rendering.OpenGL.GL.CoordTrans.Position
                                                                                                                                                         -> GHC.Types.IO
                                                                                                                                                              ())
  Data.StateVar.$= @ (Data.StateVar.SettableStateVar
                        Graphics.UI.GLFW.MousePosCallback)
                   @ (Graphics.Rendering.OpenGL.GL.CoordTrans.Position
                      -> GHC.Types.IO ())
                   tpl
  = Data.StateVar.$fHasSetterSettableStateVara_$c$=
      @ (Graphics.Rendering.OpenGL.GL.CoordTrans.Position
         -> GHC.Types.IO ())
"SPEC/SOE $= @ (SettableStateVar String) @ Title" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                           (Data.StateVar.SettableStateVar
                                                                              GHC.Base.String)
                                                                           SOE.Title
  Data.StateVar.$= @ (Data.StateVar.SettableStateVar GHC.Base.String)
                   @ [GHC.Types.Char]
                   tpl
  = Data.StateVar.$fHasSetterSettableStateVara_$c$=
      @ [GHC.Types.Char]
"SPEC/SOE $= @ (SettableStateVar WindowCloseCallback) @ (IO Bool)" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                            (Data.StateVar.SettableStateVar
                                                                                               Graphics.UI.GLFW.WindowCloseCallback)
                                                                                            (GHC.Types.IO
                                                                                               GHC.Types.Bool)
  Data.StateVar.$= @ (Data.StateVar.SettableStateVar
                        Graphics.UI.GLFW.WindowCloseCallback)
                   @ (GHC.Types.IO GHC.Types.Bool)
                   tpl
  = Data.StateVar.$fHasSetterSettableStateVara_$c$=
      @ (GHC.Types.IO GHC.Types.Bool)
"SPEC/SOE $= @ (SettableStateVar WindowRefreshCallback) @ (IO ())" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                            (Data.StateVar.SettableStateVar
                                                                                               Graphics.UI.GLFW.WindowRefreshCallback)
                                                                                            (GHC.Types.IO
                                                                                               ())
  Data.StateVar.$= @ (Data.StateVar.SettableStateVar
                        Graphics.UI.GLFW.WindowRefreshCallback)
                   @ (GHC.Types.IO ())
                   tpl
  = Data.StateVar.$fHasSetterSettableStateVara_$c$=
      @ (GHC.Types.IO ())
"SPEC/SOE $= @ (SettableStateVar WindowSizeCallback) @ (Size
                                                       -> IO ())" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                        (Data.StateVar.SettableStateVar
                                                                                                                                                           Graphics.UI.GLFW.WindowSizeCallback)
                                                                                                                                                        (Graphics.Rendering.OpenGL.GL.CoordTrans.Size
                                                                                                                                                         -> GHC.Types.IO
                                                                                                                                                              ())
  Data.StateVar.$= @ (Data.StateVar.SettableStateVar
                        Graphics.UI.GLFW.WindowSizeCallback)
                   @ (Graphics.Rendering.OpenGL.GL.CoordTrans.Size -> GHC.Types.IO ())
                   tpl
  = Data.StateVar.$fHasSetterSettableStateVara_$c$=
      @ (Graphics.Rendering.OpenGL.GL.CoordTrans.Size -> GHC.Types.IO ())
"SPEC/SOE $= @ (StateVar
                 (BlendingFactor, BlendingFactor)) @ (BlendingFactor,
                                                      BlendingFactor)" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                                                               (Data.StateVar.StateVar
                                                                                                                                                                                                  (Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor,
                                                                                                                                                                                                   Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor))
                                                                                                                                                                                               (Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor,
                                                                                                                                                                                                Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor)
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        (Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor,
                         Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor))
                   @ (Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor,
                      Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor)
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$=
      @ (Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor,
         Graphics.Rendering.OpenGL.GL.BlendingFactor.BlendingFactor)
"SPEC/SOE $= @ (StateVar
                 (ComparisonFunction, GLint, GLuint)) @ (ComparisonFunction,
                                                         GLint,
                                                         GLuint)" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                                                                                                                                 (Data.StateVar.StateVar
                                                                                                                                                                                                                                                                    (Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction,
                                                                                                                                                                                                                                                                     Graphics.Rendering.OpenGL.Raw.Types.GLint,
                                                                                                                                                                                                                                                                     Graphics.Rendering.OpenGL.Raw.Types.GLuint))
                                                                                                                                                                                                                                                                 (Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction,
                                                                                                                                                                                                                                                                  Graphics.Rendering.OpenGL.Raw.Types.GLint,
                                                                                                                                                                                                                                                                  Graphics.Rendering.OpenGL.Raw.Types.GLuint)
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        (Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction,
                         Graphics.Rendering.OpenGL.Raw.Types.GLint,
                         Graphics.Rendering.OpenGL.Raw.Types.GLuint))
                   @ (Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction,
                      Graphics.Rendering.OpenGL.Raw.Types.GLint,
                      Graphics.Rendering.OpenGL.Raw.Types.GLuint)
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$=
      @ (Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction,
         Graphics.Rendering.OpenGL.Raw.Types.GLint,
         Graphics.Rendering.OpenGL.Raw.Types.GLuint)
"SPEC/SOE $= @ (StateVar
                 (StencilOp, StencilOp, StencilOp)) @ (StencilOp,
                                                       StencilOp,
                                                       StencilOp)" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                                                                                                                         (Data.StateVar.StateVar
                                                                                                                                                                                                                                                            (Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                                                                                                                                                                                                                                                             Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                                                                                                                                                                                                                                                             Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp))
                                                                                                                                                                                                                                                         (Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                                                                                                                                                                                                                                                          Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                                                                                                                                                                                                                                                          Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp)
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        (Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                         Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                         Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp))
                   @ (Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                      Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
                      Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp)
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$=
      @ (Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
         Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp,
         Graphics.Rendering.OpenGL.GL.PerFragment.StencilOp)
"SPEC/SOE $= @ (StateVar (Color4 GLfloat)) @ (Color4 GLfloat)" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                        (Data.StateVar.StateVar
                                                                                           (Graphics.Rendering.OpenGL.GL.VertexAttributes.Color4
                                                                                              Graphics.Rendering.OpenGL.Raw.Types.GLfloat))
                                                                                        (Graphics.Rendering.OpenGL.GL.VertexAttributes.Color4
                                                                                           Graphics.Rendering.OpenGL.Raw.Types.GLfloat)
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        (Graphics.Rendering.OpenGL.GL.VertexAttributes.Color4
                           Graphics.Rendering.OpenGL.Raw.Types.GLfloat))
                   @ (Graphics.Rendering.OpenGL.GL.VertexAttributes.Color4
                        Graphics.Rendering.OpenGL.Raw.Types.GLfloat)
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$=
      @ (Graphics.Rendering.OpenGL.GL.VertexAttributes.Color4
           Graphics.Rendering.OpenGL.Raw.Types.GLfloat)
"SPEC/SOE $= @ (StateVar (Maybe ComparisonFunction)) @ (Maybe
                                                         ComparisonFunction)" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                                                                                                     (Data.StateVar.StateVar
                                                                                                                                                                        (GHC.Base.Maybe
                                                                                                                                                                           Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction))
                                                                                                                                                                     (GHC.Base.Maybe
                                                                                                                                                                        Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction)
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        (GHC.Base.Maybe
                           Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction))
                   @ (GHC.Base.Maybe
                        Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction)
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$=
      @ (GHC.Base.Maybe
           Graphics.Rendering.OpenGL.GL.ComparisonFunction.ComparisonFunction)
"SPEC/SOE $= @ (StateVar (Position, Size)) @ (Position, Size)" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                        (Data.StateVar.StateVar
                                                                                           (Graphics.Rendering.OpenGL.GL.CoordTrans.Position,
                                                                                            Graphics.Rendering.OpenGL.GL.CoordTrans.Size))
                                                                                        (Graphics.Rendering.OpenGL.GL.CoordTrans.Position,
                                                                                         Graphics.Rendering.OpenGL.GL.CoordTrans.Size)
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        (Graphics.Rendering.OpenGL.GL.CoordTrans.Position,
                         Graphics.Rendering.OpenGL.GL.CoordTrans.Size))
                   @ (Graphics.Rendering.OpenGL.GL.CoordTrans.Position,
                      Graphics.Rendering.OpenGL.GL.CoordTrans.Size)
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$=
      @ (Graphics.Rendering.OpenGL.GL.CoordTrans.Position,
         Graphics.Rendering.OpenGL.GL.CoordTrans.Size)
"SPEC/SOE $= @ (StateVar GLuint) @ GLuint" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                    (Data.StateVar.StateVar
                                                                       Graphics.Rendering.OpenGL.Raw.Types.GLuint)
                                                                    Graphics.Rendering.OpenGL.Raw.Types.GLuint
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        Graphics.Rendering.OpenGL.Raw.Types.GLuint)
                   @ Foreign.C.Types.CUInt
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$= @ Foreign.C.Types.CUInt
"SPEC/SOE $= @ (StateVar ShadingModel) @ ShadingModel" [ALWAYS] forall tpl :: Data.StateVar.HasSetter
                                                                                (Data.StateVar.StateVar
                                                                                   Graphics.Rendering.OpenGL.GL.Colors.ShadingModel)
                                                                                Graphics.Rendering.OpenGL.GL.Colors.ShadingModel
  Data.StateVar.$= @ (Data.StateVar.StateVar
                        Graphics.Rendering.OpenGL.GL.Colors.ShadingModel)
                   @ Graphics.Rendering.OpenGL.GL.Colors.ShadingModel
                   tpl
  = Data.StateVar.$fHasSetterStateVara_$c$=
      @ Graphics.Rendering.OpenGL.GL.Colors.ShadingModel
"SPEC/SOE $dmindex @ Color" [ALWAYS] forall $dIx :: GHC.Arr.Ix
                                                      SOE.Color
  GHC.Arr.$dmindex @ SOE.Color $dIx
  = \ b :: (SOE.Color, SOE.Color) i :: SOE.Color ->
    case SOE.$cinRange b i of wild {
      GHC.Types.False -> GHC.Arr.hopelessIndexError
      GHC.Types.True -> SOE.$cunsafeIndex b i }
"SPEC/SOE $dmreadsPrec @ Color" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                            SOE.Color
  GHC.Read.$dmreadsPrec @ SOE.Color $dRead
  = SOE.$fReadColor_$s$dmreadsPrec
"SPEC/SOE get @ (StateVar Double) @ Double" [ALWAYS] forall tpl :: Data.StateVar.HasGetter
                                                                     (Data.StateVar.StateVar
                                                                        GHC.Types.Double)
                                                                     GHC.Types.Double
  Data.StateVar.get @ (Data.StateVar.StateVar GHC.Types.Double)
                    @ GHC.Types.Double
                    tpl
  = Data.StateVar.$fHasGetterStateVara_$cget @ GHC.Types.Double
"SPEC/SOE get @ (StateVar Position) @ Position" [ALWAYS] forall tpl :: Data.StateVar.HasGetter
                                                                         (Data.StateVar.StateVar
                                                                            Graphics.Rendering.OpenGL.GL.CoordTrans.Position)
                                                                         Graphics.Rendering.OpenGL.GL.CoordTrans.Position
  Data.StateVar.get @ (Data.StateVar.StateVar
                         Graphics.Rendering.OpenGL.GL.CoordTrans.Position)
                    @ Graphics.Rendering.OpenGL.GL.CoordTrans.Position
                    tpl
  = Data.StateVar.$fHasGetterStateVara_$cget
      @ Graphics.Rendering.OpenGL.GL.CoordTrans.Position
"SPEC/SOE get @ (StateVar Size) @ Size" [ALWAYS] forall tpl :: Data.StateVar.HasGetter
                                                                 (Data.StateVar.StateVar
                                                                    Graphics.Rendering.OpenGL.GL.CoordTrans.Size)
                                                                 Graphics.Rendering.OpenGL.GL.CoordTrans.Size
  Data.StateVar.get @ (Data.StateVar.StateVar
                         Graphics.Rendering.OpenGL.GL.CoordTrans.Size)
                    @ Graphics.Rendering.OpenGL.GL.CoordTrans.Size
                    tpl
  = Data.StateVar.$fHasGetterStateVara_$cget
      @ Graphics.Rendering.OpenGL.GL.CoordTrans.Size
"SPEC/SOE readListDefault @ Color" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               SOE.Color
  GHC.Read.readListDefault @ SOE.Color $dRead
  = SOE.$fReadColor_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

